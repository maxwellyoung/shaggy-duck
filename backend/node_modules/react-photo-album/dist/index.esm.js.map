{"version":3,"file":"index.esm.js","sources":["../src/utils/ratio.ts","../src/utils/round.ts","../src/utils/heap.ts","../src/utils/dijkstra.ts","../src/layouts/rows.ts","../src/components/renderers/PhotoRenderer.tsx","../src/components/renderers/RowContainerRenderer.tsx","../src/components/layouts/RowsLayout.tsx","../src/utils/shortestPath.ts","../src/layouts/columns.ts","../src/components/renderers/ColumnContainerRenderer.tsx","../src/components/layouts/ColumnsLayout.tsx","../src/layouts/masonry.ts","../src/components/layouts/MasonryLayout.tsx","../src/components/renderers/ContainerRenderer.tsx","../src/hooks/useLayoutEffect.ts","../src/hooks/useMounted.ts","../src/hooks/useContainerWidth.ts","../src/utils/responsive.ts","../src/PhotoAlbum.tsx"],"sourcesContent":["const ratio = ({ width, height }: { width: number; height: number }) => width / height;\n\nexport default ratio;\n","// round a value to a specified number of decimal places\nconst round = (value: number, decimals = 0) => {\n    const factor = 10 ** decimals;\n    return Math.round((value + Number.EPSILON) * factor) / factor;\n};\n\nexport default round;\n","type Comparator<T> = (a: T, b: T) => number;\n\nexport const RankingFunctionComparator =\n    <T>(rank: (element: T) => number) =>\n    (a: T, b: T) =>\n        rank(b) - rank(a);\n\nexport const NumericComparator = RankingFunctionComparator<number>((x: number) => x);\n\n/**\n * Min heap implementation.\n * Comparator function is expected to return a positive number, zero or a negative number if a > b, a === b or a < b.\n */\nconst MinHeap = <T>(comparator: Comparator<T>) => {\n    // heap-ordered complete binary tree in heap[1..n] with heap[0] unused\n    const heap: T[] = [];\n    const compare = comparator;\n    let n = 0;\n\n    // comparator function\n    const greater = (i: number, j: number) => compare(heap[i], heap[j]) < 0;\n\n    // swap two elements\n    const swap = (i: number, j: number) => {\n        const temp = heap[i];\n        heap[i] = heap[j];\n        heap[j] = temp;\n    };\n\n    // bubble k-th element up\n    const swim = (k: number) => {\n        let k2 = k >> 1;\n        while (k > 1 && greater(k2, k)) {\n            swap(k2, k);\n            k = k2;\n            k2 = k >> 1;\n        }\n    };\n\n    // bubble k-th element down\n    const sink = (k: number) => {\n        let j = k << 1;\n        while (j <= n) {\n            if (j < n && greater(j, j + 1)) j++;\n            if (!greater(k, j)) break;\n            swap(k, j);\n            k = j;\n            j = k << 1;\n        }\n    };\n\n    return {\n        /** add element to the heap */\n        push: (element: T) => {\n            n += 1;\n            heap[n] = element;\n            swim(n);\n        },\n\n        /** remove the first element from the heap */\n        pop: (): T | undefined => {\n            if (n === 0) return undefined;\n            swap(1, n);\n            n -= 1;\n            const max = heap.pop();\n            sink(1);\n            return max;\n        },\n\n        /** heap size */\n        size: (): number => n,\n    };\n};\n\nexport default MinHeap;\n","import MinHeap, { RankingFunctionComparator } from \"./heap\";\n\ntype Element = string;\n\ntype HeapElement = {\n    id: string;\n    weight: number;\n};\n\ntype ElementToElementMap = {\n    [key: Element]: Element;\n};\n\ntype ElementToNumberMap = {\n    [key: Element]: number;\n};\n\ntype GraphFunction = (node: string) => { [key: string]: number };\n\nconst buildPrecedentsMap = (graph: GraphFunction, startNode: Element, endNode: Element) => {\n    // store the previous vertex of the shortest path of arrival\n    const precedentsMap: ElementToElementMap = {};\n\n    // store nodes already visited\n    const visited: ElementToNumberMap = {};\n\n    // store/update only the shortest edge weights measured\n    // the purpose of this is object is constant time lookup vs. binary heap lookup O(n)\n    const storedShortestPaths: ElementToNumberMap = {};\n    storedShortestPaths[startNode] = 0;\n\n    // priority queue of ALL nodes and storedShortestPaths\n    // don't bother to delete them because it's faster to look at visited?\n    const pQueue = MinHeap<HeapElement>(RankingFunctionComparator((el: HeapElement): number => el.weight));\n    pQueue.push({ id: startNode, weight: 0 });\n\n    let shortestNode;\n    // pop a node with the shortest total weight from start node\n    while ((shortestNode = pQueue.pop()) !== undefined) {\n        const shortestNodeId = shortestNode.id;\n\n        // if already visited, continue\n        if (visited[shortestNodeId]) continue;\n\n        // visit neighboring nodes\n        const neighboringNodes = graph(shortestNodeId);\n        visited[shortestNodeId] = 1;\n\n        // meet the neighbors, looking for shorter paths\n        for (const neighbor in neighboringNodes) {\n            // weight of path from startNode to this neighbor\n            const newTotalWeight = shortestNode.weight + neighboringNodes[neighbor];\n\n            // if this is the first time meeting the neighbor OR if the new total weight from\n            // start node to this neighbor node is greater than the old weight path, update it,\n            // and update precedent node\n            //\n            // introducing deterministic tiebreaker to guard against edge cases where path weight difference can be\n            // as low as 1e-12, which leads to visual flickering during subsequent re-renders as layout continues to\n            // shift back and forth\n            if (\n                storedShortestPaths[neighbor] === undefined ||\n                (storedShortestPaths[neighbor] > newTotalWeight &&\n                    (storedShortestPaths[neighbor] / newTotalWeight > 1.005 ||\n                        precedentsMap[neighbor] < shortestNodeId))\n            ) {\n                storedShortestPaths[neighbor] = newTotalWeight;\n                pQueue.push({ id: neighbor, weight: newTotalWeight });\n                precedentsMap[neighbor] = shortestNodeId;\n            }\n        }\n    }\n\n    if (typeof storedShortestPaths[endNode] === \"undefined\") {\n        // encountered impossible layout\n        return undefined;\n    }\n\n    return precedentsMap;\n};\n\n// build the route from precedent node vertices\nconst getPathFromPrecedentsMap = (precedentsMap: ElementToElementMap, endNode: Element) => {\n    const nodes = [];\n    let n = endNode;\n    while (n) {\n        nodes.push(n);\n        n = precedentsMap[n];\n    }\n    return nodes.reverse();\n};\n\n// build the precedentsMap and find the shortest path from it\nexport const findShortestPath = (graph: GraphFunction, startNode: Element, endNode: Element) => {\n    const precedentsMap = buildPrecedentsMap(graph, startNode, endNode);\n    return precedentsMap !== undefined ? getPathFromPrecedentsMap(precedentsMap, endNode) : undefined;\n};\n","import ratio from \"../utils/ratio\";\nimport round from \"../utils/round\";\nimport { findShortestPath } from \"../utils/dijkstra\";\nimport { Instrumentation, Photo, PhotoLayout, RowConstraints, RowsLayoutOptions } from \"../types\";\n\n// guesstimate how many neighboring nodes should be searched based on\n// the aspect columnRatio of the container with images and minimal aspect columnRatio of all photos\n// as the maximum amount of photos per row, plus some nodes\nconst findIdealNodeSearch = ({\n    photos,\n    targetRowHeight,\n    containerWidth,\n}: {\n    photos: Array<Photo>;\n    targetRowHeight: number;\n    containerWidth: number;\n}): number => {\n    const minRatio = photos.reduce((acc, photo) => Math.min(ratio(photo), acc), Number.MAX_VALUE);\n    return round(containerWidth / targetRowHeight / minRatio) + 2;\n};\n\n// compute sizes by creating a graph with rows as edges and photo to break on as nodes\n// to calculate the single best layout using Dijkstra's findShortestPat\n\n// get the height for a set of photos in a potential row\nconst getCommonHeight = (row: Array<Photo>, containerWidth: number, spacing: number, padding: number) => {\n    const rowWidth = containerWidth - (row.length - 1) * spacing - 2 * padding * row.length;\n    const totalAspectRatio = row.reduce((acc, photo) => acc + ratio(photo), 0);\n    return rowWidth / totalAspectRatio;\n};\n\n// calculate the cost of breaking at this node (edge weight)\nconst cost = (\n    photos: Array<Photo>,\n    i: number,\n    j: number,\n    width: number,\n    targetRowHeight: number,\n    spacing: number,\n    padding: number\n) => {\n    const row = photos.slice(i, j);\n    const commonHeight = getCommonHeight(row, width, spacing, padding);\n    return commonHeight > 0 ? (commonHeight - targetRowHeight) ** 2 * row.length : undefined;\n};\n\n// return function that gets the neighboring nodes of node and returns costs\nconst makeGetNeighbors =\n    ({\n        photos,\n        layoutOptions,\n        targetRowHeight,\n        limitNodeSearch,\n        rowConstraints,\n        instrumentation,\n    }: {\n        photos: Array<Photo>;\n        layoutOptions: RowsLayoutOptions;\n        targetRowHeight: number;\n        limitNodeSearch: number;\n        rowConstraints?: RowConstraints;\n        instrumentation?: Instrumentation;\n    }) =>\n    (node: string) => {\n        const { containerWidth, spacing, padding } = layoutOptions;\n        const results: { [key: string]: number } = {};\n        const start = +node;\n        results[+start] = 0;\n        const startOffset = rowConstraints?.minPhotos ?? 1;\n        const endOffset = Math.min(limitNodeSearch, rowConstraints?.maxPhotos ?? Infinity);\n        for (let i = start + startOffset; i < photos.length + 1; i += 1) {\n            if (i - start > endOffset && !instrumentation?.fullGraphSearch) break;\n            const currentCost = cost(photos, start, i, containerWidth, targetRowHeight, spacing, padding);\n            if (currentCost === undefined) break;\n            results[i.toString()] = currentCost;\n        }\n        return results;\n    };\n\ntype RowsLayoutModel<T extends Photo = Photo> = { photo: T; layout: PhotoLayout }[][] | undefined;\n\nconst computeRowsLayout = <T extends Photo = Photo>({\n    photos,\n    layoutOptions,\n    instrumentation,\n}: {\n    photos: T[];\n    layoutOptions: RowsLayoutOptions;\n    instrumentation?: Instrumentation;\n}): RowsLayoutModel<T> => {\n    const { spacing, padding, containerWidth, targetRowHeight, rowConstraints } = layoutOptions;\n\n    instrumentation?.onStartLayoutComputation?.();\n\n    const limitNodeSearch = findIdealNodeSearch({ photos, containerWidth, targetRowHeight });\n\n    const getNeighbors = makeGetNeighbors({\n        photos,\n        layoutOptions,\n        targetRowHeight,\n        limitNodeSearch,\n        rowConstraints,\n        instrumentation,\n    });\n\n    const path = findShortestPath(getNeighbors, \"0\", `${photos.length}`);\n\n    // impossible layout\n    if (path === undefined) return undefined;\n\n    const result = [];\n\n    for (let i = 1; i < path.length; i += 1) {\n        const row = photos.map((photo, index) => ({ photo, index })).slice(+path[i - 1], +path[i]);\n        const height = getCommonHeight(\n            row.map(({ photo }) => photo),\n            containerWidth,\n            spacing,\n            padding\n        );\n        result.push(\n            row.map(({ photo, index }, photoIndex) => ({\n                photo,\n                layout: {\n                    height,\n                    width: height * ratio(photo),\n                    index,\n                    photoIndex,\n                    photosCount: row.length,\n                },\n            }))\n        );\n    }\n\n    instrumentation?.onFinishLayoutComputation?.(result);\n\n    return result;\n};\n\nexport default computeRowsLayout;\n","import * as React from \"react\";\nimport { CSSProperties, HTMLAttributes, MouseEvent } from \"react\";\n\nimport round from \"../../utils/round\";\nimport { LayoutOptions, Photo, PhotoLayout, PhotoProps, RenderPhoto } from \"../../types\";\n\nconst calcWidth = (\n    base: string,\n    { width, photosCount }: PhotoLayout,\n    { spacing, padding, containerWidth }: LayoutOptions\n) => {\n    const gaps = spacing * (photosCount - 1) + 2 * padding * photosCount;\n    return `calc((${base} - ${gaps}px) / ${round((containerWidth - gaps) / width, 5)})`;\n};\n\nconst cssWidth = (layout: PhotoLayout, layoutOptions: LayoutOptions) => {\n    if (layoutOptions.layout !== \"rows\") {\n        return `calc(100% - ${2 * layoutOptions.padding}px)`;\n    }\n    return calcWidth(\"100%\", layout, layoutOptions);\n};\n\nconst calculateSizesValue = (size: string, layout: PhotoLayout, layoutOptions: LayoutOptions) =>\n    calcWidth(size.match(/calc\\((.*)\\)/)?.[1] ?? size, layout, layoutOptions);\n\nconst srcSetAndSizes = <T extends Photo = Photo>(photo: T, layout: PhotoLayout, layoutOptions: LayoutOptions) => {\n    let srcSet, sizes;\n\n    if (photo.images && photo.images.length > 0) {\n        srcSet = photo.images\n            .concat([\n                {\n                    src: photo.src,\n                    width: photo.width,\n                    height: photo.height,\n                },\n            ])\n            .sort((first, second) => first.width - second.width)\n            .map((image) => `${image.src} ${image.width}w`)\n            .join(\", \");\n    }\n\n    if (layoutOptions.sizes) {\n        sizes = (layoutOptions.sizes.sizes || [])\n            .map(({ viewport, size }) => `${viewport} ${calculateSizesValue(size, layout, layoutOptions)}`)\n            .concat(calculateSizesValue(layoutOptions.sizes.size, layout, layoutOptions))\n            .join(\", \");\n    } else {\n        sizes = `${Math.ceil((layout.width / (layoutOptions.viewportWidth || layoutOptions.containerWidth)) * 100)}vw`;\n    }\n\n    return { srcSet, sizes };\n};\n\nconst defaultRenderPhoto: RenderPhoto = ({ imageProps }) => {\n    const { src, alt, srcSet, sizes, ...rest } = imageProps;\n    return <img src={src} alt={alt} {...(srcSet ? { srcSet, sizes } : null)} {...rest} />;\n};\n\ntype PhotoRendererProps<T extends Photo = Photo> = Omit<PhotoProps<T>, \"imageProps\"> & {\n    imageProps?: HTMLAttributes<HTMLImageElement>;\n} & { renderPhoto?: RenderPhoto<T> };\n\nconst PhotoRenderer = <T extends Photo = Photo>(props: PhotoRendererProps<T>) => {\n    const { photo, layout, layoutOptions, imageProps: { style, ...restImageProps } = {}, renderPhoto } = props;\n    const { onClick } = layoutOptions;\n\n    const imageStyle = {\n        display: \"block\",\n        boxSizing: \"content-box\",\n        width: cssWidth(layout, layoutOptions),\n        height: \"auto\",\n        aspectRatio: `${photo.width} / ${photo.height}`,\n        ...(layoutOptions.padding ? { padding: `${layoutOptions.padding}px` } : null),\n        ...((layoutOptions.layout === \"columns\" || layoutOptions.layout === \"masonry\") &&\n        layout.photoIndex < layout.photosCount - 1\n            ? { marginBottom: `${layoutOptions.spacing}px` }\n            : null),\n        ...(onClick ? { cursor: \"pointer\" } : null),\n        ...style,\n    } as CSSProperties;\n\n    const handleClick = onClick\n        ? (event: MouseEvent) => {\n              onClick(event, photo, layout.index);\n          }\n        : undefined;\n\n    const imageProps = {\n        src: photo.src,\n        alt: photo.alt ?? \"\",\n        title: photo.title,\n        onClick: handleClick,\n        style: imageStyle,\n        className: \"react-photo-album--photo\",\n        ...srcSetAndSizes(photo, layout, layoutOptions),\n        ...restImageProps,\n    };\n\n    return (renderPhoto ?? defaultRenderPhoto)({ photo, layout, layoutOptions, imageProps });\n};\n\nexport default PhotoRenderer;\n","import * as React from \"react\";\nimport { CSSProperties, PropsWithChildren } from \"react\";\n\nimport { RenderRowContainer, RowContainerProps } from \"../../types\";\n\nconst defaultRenderRowContainer: RenderRowContainer = ({ rowContainerProps, children }) => (\n    <div {...rowContainerProps}>{children}</div>\n);\n\ntype RowContainerRendererProps = PropsWithChildren<\n    Omit<RowContainerProps, \"rowContainerProps\"> & Pick<Partial<RowContainerProps>, \"rowContainerProps\">\n> & {\n    renderRowContainer?: RenderRowContainer;\n};\n\nconst RowContainerRenderer = (props: RowContainerRendererProps) => {\n    const {\n        layoutOptions,\n        rowIndex,\n        rowsCount,\n        renderRowContainer,\n        rowContainerProps: { style, ...restRowContainerProps } = {},\n        children,\n    } = props;\n\n    const rowContainerProps = {\n        className: \"react-photo-album--row\",\n        style: {\n            display: \"flex\",\n            flexDirection: \"row\",\n            flexWrap: \"nowrap\",\n            alignItems: \"flex-start\",\n            justifyContent: \"space-between\",\n            ...(rowIndex < rowsCount - 1 ? { marginBottom: `${layoutOptions.spacing}px` } : null),\n            ...style,\n        } as CSSProperties,\n        ...restRowContainerProps,\n    };\n\n    return (renderRowContainer ?? defaultRenderRowContainer)({\n        layoutOptions,\n        rowIndex,\n        rowsCount,\n        rowContainerProps,\n        children,\n    });\n};\n\nexport default RowContainerRenderer;\n","import * as React from \"react\";\n\nimport computeRowsLayout from \"../../layouts/rows\";\nimport PhotoRenderer from \"../renderers/PhotoRenderer\";\nimport RowContainerRenderer from \"../renderers/RowContainerRenderer\";\nimport {\n    ComponentsProps,\n    Instrumentation,\n    Photo,\n    RenderPhoto,\n    RenderRowContainer,\n    RowsLayoutOptions,\n} from \"../../types\";\n\ntype RowsLayoutProps<T extends Photo = Photo> = {\n    photos: T[];\n    layoutOptions: RowsLayoutOptions;\n    renderPhoto?: RenderPhoto<T>;\n    renderRowContainer?: RenderRowContainer;\n    componentsProps?: ComponentsProps;\n    instrumentation?: Instrumentation;\n};\n\nconst RowsLayout = <T extends Photo = Photo>(props: RowsLayoutProps<T>): JSX.Element => {\n    const { photos, layoutOptions, renderPhoto, renderRowContainer, componentsProps, instrumentation } = props;\n\n    const rowsLayout = computeRowsLayout({ photos, layoutOptions, instrumentation });\n\n    if (rowsLayout === undefined) return <></>;\n\n    return (\n        <>\n            {rowsLayout.map((row, rowIndex) => (\n                <RowContainerRenderer\n                    key={`row-${rowIndex}`}\n                    layoutOptions={layoutOptions}\n                    rowIndex={rowIndex}\n                    rowsCount={rowsLayout.length}\n                    renderRowContainer={renderRowContainer}\n                    rowContainerProps={componentsProps?.rowContainerProps}\n                >\n                    {row.map(({ photo, layout }) => (\n                        <PhotoRenderer\n                            key={photo.key || photo.src}\n                            photo={photo}\n                            layout={layout}\n                            layoutOptions={layoutOptions}\n                            renderPhoto={renderPhoto}\n                            imageProps={componentsProps?.imageProps}\n                        />\n                    ))}\n                </RowContainerRenderer>\n            ))}\n        </>\n    );\n};\n\nexport default RowsLayout;\n","type GraphFunction = (node: number) => Array<{ neighbor: number; weight: number }>;\n\ntype Comp = number[][][];\n\nconst computeShortestPath = (graph: GraphFunction, pathLength: number, startNode: number, endNode: number) => {\n    // computation matrix: node id x path length x [previous node id, path weight]\n    // i.e. element in comp[X][k] represents previous node and path weight of the best path of length k\n    // from the starting node to node X\n    const comp: Comp = [];\n\n    // sorted set of neighboring nodes that need to be visited\n    // i.e. queue[k][X] represents node X with partial path of length k\n    const queue: { [key: number]: { [key: number]: object | null } } = { 0: { [startNode]: null } };\n\n    for (let length = 0; length < pathLength; length += 1) {\n        Object.keys(queue[length]).forEach((n) => {\n            const node = +n;\n            const accumulatedWeight = length > 0 && comp[node][length] ? comp[node][length][1] : 0;\n\n            graph(node).forEach(({ neighbor, weight }) => {\n                if (!comp[neighbor]) {\n                    comp[neighbor] = [];\n                }\n\n                // introducing deterministic tiebreaker to guard against edge cases where path weight difference can be\n                // as low as 1e-12, which leads to visual flickering during subsequent re-renders as layout continues to\n                // shift back and forth\n                const newTotalWeight = accumulatedWeight + weight;\n                if (\n                    !comp[neighbor][length + 1] ||\n                    (comp[neighbor][length + 1][1] > newTotalWeight &&\n                        (comp[neighbor][length + 1][1] / newTotalWeight > 1.0001 ||\n                            node < comp[neighbor][length + 1][0]))\n                ) {\n                    comp[neighbor][length + 1] = [node, newTotalWeight];\n                }\n\n                if (length < pathLength - 1 && neighbor !== endNode) {\n                    if (!queue[length + 1]) {\n                        queue[length + 1] = {};\n                    }\n                    queue[length + 1][neighbor] = null;\n                }\n            });\n        });\n    }\n    return comp;\n};\n\nconst reconstructShortestPath = (comp: Comp, pathLength: number, endNode: number) => {\n    const path = [endNode];\n    for (let node = endNode, length = pathLength; length > 0; length -= 1) {\n        const [prevNode] = comp[node][length];\n        node = prevNode;\n        path.push(node);\n    }\n    return path.reverse();\n};\n\n// Find the shortest path of length N in a weighted directed graph using dynamic programming algorithm.\nconst findShortestPathLengthN = (graph: GraphFunction, pathLength: number, startNode: number, endNode: number) =>\n    reconstructShortestPath(computeShortestPath(graph, pathLength, startNode, endNode), pathLength, endNode);\n\nexport default findShortestPathLengthN;\n","import ratio from \"../utils/ratio\";\nimport findShortestPathLengthN from \"../utils/shortestPath\";\nimport { ColumnsLayoutOptions, Instrumentation, Photo, PhotoLayout } from \"../types\";\n\n// return function that gets the neighboring nodes of node and returns costs\nconst makeGetNeighbors =\n    ({\n        photos,\n        spacing,\n        padding,\n        targetColumnWidth,\n        targetColumnHeight,\n        instrumentation,\n    }: {\n        photos: Array<Photo>;\n        spacing: number;\n        padding: number;\n        targetColumnWidth: number;\n        targetColumnHeight: number;\n        instrumentation?: Instrumentation;\n    }) =>\n    (node: number): Array<{ neighbor: number; weight: number }> => {\n        const results = [];\n        const cutOffHeight = targetColumnHeight * 1.5;\n        let height = targetColumnWidth / ratio(photos[node]) + 2 * padding;\n        for (let i = node + 1; i < photos.length + 1; i += 1) {\n            results.push({ neighbor: i, weight: (targetColumnHeight - height) ** 2 });\n            if ((height > cutOffHeight && !instrumentation?.fullGraphSearch) || i === photos.length) {\n                break;\n            }\n            height += targetColumnWidth / ratio(photos[i]) + spacing + 2 * padding;\n        }\n        return results;\n    };\n\nconst buildColumnsModel = <T extends Photo = Photo>({\n    path,\n    photos,\n    containerWidth,\n    columnsGaps,\n    columnsRatios,\n    spacing,\n    padding,\n}: {\n    path: number[];\n    photos: T[];\n    containerWidth: number;\n    columnsGaps: number[];\n    columnsRatios: number[];\n    spacing: number;\n    padding: number;\n}) => {\n    const columnsModel = [];\n\n    const totalRatio = columnsRatios.reduce((acc, ratio) => acc + ratio, 0);\n\n    for (let i = 0; i < path.length - 1; i += 1) {\n        const column = photos.map((photo, index) => ({ photo, index })).slice(path[i], path[i + 1]);\n\n        const totalAdjustedGaps = columnsRatios.reduce(\n            (acc, ratio, index) => acc + (columnsGaps[i] - columnsGaps[index]) * ratio,\n            0\n        );\n\n        const columnWidth =\n            ((containerWidth - (path.length - 2) * spacing - 2 * (path.length - 1) * padding - totalAdjustedGaps) *\n                columnsRatios[i]) /\n            totalRatio;\n\n        columnsModel.push(\n            column.map(({ photo, index }, photoIndex) => ({\n                photo,\n                layout: {\n                    width: columnWidth,\n                    height: columnWidth / ratio(photo),\n                    index,\n                    photoIndex,\n                    photosCount: column.length,\n                },\n            }))\n        );\n    }\n\n    return columnsModel;\n};\n\nconst computeColumnsModel = <T extends Photo = Photo>({\n    photos,\n    layoutOptions,\n    targetColumnWidth,\n    instrumentation,\n}: {\n    photos: T[];\n    layoutOptions: ColumnsLayoutOptions;\n    targetColumnWidth: number;\n    instrumentation?: Instrumentation;\n}) => {\n    const { columns, spacing, padding, containerWidth } = layoutOptions;\n\n    const columnsGaps: number[] = [];\n    const columnsRatios: number[] = [];\n\n    // fill first available columns if there are not enough photos\n    if (photos.length <= columns) {\n        for (let index = 0; index < photos.length; index += 1) {\n            columnsGaps[index] = 2 * padding;\n            columnsRatios[index] = ratio(photos[index]);\n        }\n\n        const columnsModel = buildColumnsModel({\n            path: Array.from({ length: photos.length + 1 }).map((_, index) => index),\n            photos,\n            columnsRatios,\n            columnsGaps,\n            containerWidth,\n            spacing,\n            padding,\n        });\n\n        return { columnsGaps, columnsRatios, columnsModel };\n    }\n\n    // target column height including spacing and padding\n    const targetColumnHeight =\n        (photos.reduce((acc, photo) => acc + targetColumnWidth / ratio(photo), 0) +\n            spacing * (photos.length - columns) +\n            2 * padding * photos.length) /\n        columns;\n\n    const getNeighbors = makeGetNeighbors({\n        photos,\n        targetColumnWidth,\n        targetColumnHeight,\n        spacing,\n        padding,\n        instrumentation,\n    });\n\n    const path = findShortestPathLengthN(getNeighbors, columns, 0, photos.length).map((node) => +node);\n\n    for (let i = 0; i < path.length - 1; i += 1) {\n        const column = photos.slice(path[i], path[i + 1]);\n        columnsGaps[i] = spacing * (column.length - 1) + 2 * padding * column.length;\n        columnsRatios[i] = 1 / column.reduce((acc, photo) => acc + 1 / ratio(photo), 0);\n    }\n\n    const columnsModel = buildColumnsModel({\n        path,\n        photos,\n        columnsRatios,\n        columnsGaps,\n        containerWidth,\n        spacing,\n        padding,\n    });\n\n    return { columnsGaps, columnsRatios, columnsModel };\n};\n\ntype ComputeColumnsLayoutProps<T extends Photo = Photo> = {\n    photos: T[];\n    layoutOptions: ColumnsLayoutOptions;\n    instrumentation?: Instrumentation;\n};\n\ntype ColumnsLayoutModel<T extends Photo = Photo> =\n    | {\n          columnsModel: { photo: T; layout: PhotoLayout }[][];\n          columnsRatios: number[];\n          columnsGaps: number[];\n      }\n    | undefined;\n\nconst computeLayout = <T extends Photo = Photo>(props: ComputeColumnsLayoutProps<T>): ColumnsLayoutModel<T> => {\n    const { photos, layoutOptions, instrumentation } = props;\n    const { columns, spacing, padding, containerWidth } = layoutOptions;\n\n    const targetColumnWidth = (containerWidth - spacing * (columns - 1) - 2 * padding * columns) / columns;\n\n    const { columnsGaps, columnsRatios, columnsModel } = computeColumnsModel({\n        photos,\n        layoutOptions,\n        targetColumnWidth,\n        instrumentation,\n    });\n\n    if (\n        columnsModel.findIndex(\n            (columnModel) => columnModel.findIndex(({ layout: { width, height } }) => width < 0 || height < 0) >= 0\n        ) >= 0\n    ) {\n        // encountered impossible layout\n        if (columns > 1) {\n            // will try to find a solution recursively with fewer columns\n            return computeLayout({\n                photos,\n                layoutOptions: {\n                    ...layoutOptions,\n                    columns: columns - 1,\n                },\n                instrumentation,\n            });\n        } else {\n            // bailing out\n            return undefined;\n        }\n    }\n\n    return { columnsModel, columnsGaps, columnsRatios };\n};\n\nconst computeColumnsLayout = <T extends Photo = Photo>({\n    photos,\n    layoutOptions,\n    instrumentation,\n}: ComputeColumnsLayoutProps<T>): ColumnsLayoutModel<T> => {\n    instrumentation?.onStartLayoutComputation?.();\n\n    const result = computeLayout({\n        photos,\n        layoutOptions: {\n            ...layoutOptions,\n            columns: Math.min(layoutOptions.columns, photos.length),\n        },\n        instrumentation,\n    });\n\n    instrumentation?.onFinishLayoutComputation?.(result);\n\n    return result;\n};\n\nexport default computeColumnsLayout;\n","import * as React from \"react\";\nimport { CSSProperties, PropsWithChildren } from \"react\";\n\nimport round from \"../../utils/round\";\nimport { ColumnContainerProps, RenderColumnContainer } from \"../../types\";\n\nconst defaultRenderColumnContainer: RenderColumnContainer = ({ columnContainerProps, children }) => (\n    <div {...columnContainerProps}>{children}</div>\n);\n\nconst cssWidth = (props: ColumnContainerRendererProps) => {\n    const { layoutOptions, columnIndex, columnsCount, columnsGaps, columnsRatios } = props;\n    const { layout, spacing, padding } = layoutOptions;\n\n    if (layout === \"masonry\" || !columnsGaps || !columnsRatios) {\n        return `calc((100% - ${spacing * (columnsCount - 1)}px) / ${columnsCount})`;\n    }\n\n    const totalRatio = columnsRatios.reduce((acc, ratio) => acc + ratio, 0);\n    const totalAdjustedGaps = columnsRatios.reduce(\n        (acc, ratio, index) => acc + (columnsGaps[columnIndex] - columnsGaps[index]) * ratio,\n        0\n    );\n\n    return `calc((100% - ${round(\n        (columnsCount - 1) * spacing + 2 * columnsCount * padding + totalAdjustedGaps,\n        3\n    )}px) * ${round(columnsRatios[columnIndex] / totalRatio, 5)} + ${2 * padding}px)`;\n};\n\ntype ColumnContainerRendererProps = PropsWithChildren<\n    Omit<ColumnContainerProps, \"columnContainerProps\"> & Pick<Partial<ColumnContainerProps>, \"columnContainerProps\">\n> & {\n    renderColumnContainer?: RenderColumnContainer;\n};\n\nconst ColumnContainerRenderer = (props: ColumnContainerRendererProps) => {\n    const {\n        layoutOptions,\n        renderColumnContainer,\n        children,\n        columnContainerProps: { style, ...restColumnContainerProps } = {},\n        ...rest\n    } = props;\n\n    const columnContainerProps = {\n        className: \"react-photo-album--column\",\n        style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            flexWrap: \"nowrap\",\n            alignItems: \"flex-start\",\n            width: cssWidth(props),\n            justifyContent: layoutOptions.layout === \"columns\" ? \"space-between\" : \"flex-start\",\n            ...style,\n        } as CSSProperties,\n        ...restColumnContainerProps,\n    };\n\n    return (renderColumnContainer ?? defaultRenderColumnContainer)({\n        layoutOptions,\n        columnContainerProps,\n        children,\n        ...rest,\n    });\n};\n\nexport default ColumnContainerRenderer;\n","import * as React from \"react\";\n\nimport computeColumnsLayout from \"../../layouts/columns\";\nimport PhotoRenderer from \"../renderers/PhotoRenderer\";\nimport ColumnContainerRenderer from \"../renderers/ColumnContainerRenderer\";\nimport {\n    ColumnsLayoutOptions,\n    ComponentsProps,\n    Instrumentation,\n    Photo,\n    RenderColumnContainer,\n    RenderPhoto,\n} from \"../../types\";\n\ntype ColumnsLayoutProps<T extends Photo = Photo> = {\n    photos: T[];\n    layoutOptions: ColumnsLayoutOptions;\n    renderPhoto?: RenderPhoto<T>;\n    renderColumnContainer?: RenderColumnContainer;\n    componentsProps?: ComponentsProps;\n    instrumentation?: Instrumentation;\n};\n\nconst ColumnsLayout = <T extends Photo = Photo>(props: ColumnsLayoutProps<T>): JSX.Element => {\n    const { photos, layoutOptions, renderPhoto, renderColumnContainer, componentsProps, instrumentation } = props;\n\n    const columnsLayout = computeColumnsLayout({ photos, layoutOptions, instrumentation });\n\n    if (columnsLayout === undefined) return <></>;\n\n    const { columnsModel, columnsRatios, columnsGaps } = columnsLayout;\n\n    return (\n        <>\n            {columnsModel.map((column, columnIndex) => (\n                <ColumnContainerRenderer\n                    key={`column-${columnIndex}`}\n                    layoutOptions={layoutOptions}\n                    columnIndex={columnIndex}\n                    columnsCount={columnsModel.length}\n                    columnsGaps={columnsGaps}\n                    columnsRatios={columnsRatios}\n                    renderColumnContainer={renderColumnContainer}\n                    columnContainerProps={componentsProps?.columnContainerProps}\n                >\n                    {column.map(({ photo, layout }) => (\n                        <PhotoRenderer\n                            key={photo.key || photo.src}\n                            photo={photo}\n                            layout={layout}\n                            layoutOptions={layoutOptions}\n                            renderPhoto={renderPhoto}\n                            imageProps={componentsProps?.imageProps}\n                        />\n                    ))}\n                </ColumnContainerRenderer>\n            ))}\n        </>\n    );\n};\n\nexport default ColumnsLayout;\n","import ratio from \"../utils/ratio\";\nimport { ColumnsLayoutOptions, Instrumentation, Photo, PhotoLayout } from \"../types\";\n\ntype ComputeMasonryLayoutProps<T extends Photo = Photo> = {\n    photos: T[];\n    layoutOptions: ColumnsLayoutOptions;\n    instrumentation?: Instrumentation;\n};\n\ntype MasonryColumnsModel<T extends Photo = Photo> = { photo: T; layout: PhotoLayout }[][] | undefined;\n\nconst computeMasonryLayout = <T extends Photo = Photo>(props: ComputeMasonryLayoutProps<T>): MasonryColumnsModel<T> => {\n    const { photos, layoutOptions, instrumentation } = props;\n    const { spacing, padding, containerWidth } = layoutOptions;\n\n    const columns = Math.min(layoutOptions.columns, photos.length);\n\n    instrumentation?.onStartLayoutComputation?.();\n\n    // calculate column width based on total width and columns count\n    const columnWidth = (containerWidth - spacing * (columns - 1) - 2 * padding * columns) / columns;\n\n    // encountered impossible layout\n    if (columnWidth <= 0) {\n        // will try to find a solution recursively with fewer columns\n        return columns > 1\n            ? computeMasonryLayout({\n                  ...props,\n                  layoutOptions: { ...layoutOptions, columns: columns - 1 },\n              })\n            : undefined;\n    }\n\n    // store current top positions for each column\n    const columnsCurrentTopPositions: number[] = [];\n    for (let i = 0; i < columns; i += 1) {\n        columnsCurrentTopPositions[i] = 0;\n    }\n\n    // group photos by column\n    const columnsModel = photos.reduce<{ photo: T; index: number }[][]>((acc, photo: T, index) => {\n        // find the shortest column\n        const shortestColumn = columnsCurrentTopPositions.reduce(\n            (acc, item, i) =>\n                // subtracting 1 here to compensate for floating point precision errors\n                // when two columns have identical height their floating point values can be slightly off\n                // in subsequent re-renders, leading to images jumping between columns\n                item < columnsCurrentTopPositions[acc] - 1 ? i : acc,\n            0\n        );\n\n        // update top position of the shortest column\n        columnsCurrentTopPositions[shortestColumn] =\n            columnsCurrentTopPositions[shortestColumn] + columnWidth / ratio(photo) + spacing + 2 * padding;\n\n        // place a photo into the shortest column\n        if (!acc[shortestColumn]) {\n            acc[shortestColumn] = [];\n        }\n        acc[shortestColumn].push({ photo, index });\n\n        return acc;\n    }, []);\n\n    // map through each column and photo and add layout properties\n    const result = columnsModel.map((column) =>\n        column.map(({ photo, index }, photoIndex) => ({\n            photo,\n            layout: {\n                width: columnWidth,\n                height: columnWidth / ratio(photo),\n                index,\n                photoIndex,\n                photosCount: column.length,\n            },\n        }))\n    );\n\n    instrumentation?.onFinishLayoutComputation?.(result);\n\n    return result;\n};\n\nexport default computeMasonryLayout;\n","import * as React from \"react\";\n\nimport computeMasonryLayout from \"../../layouts/masonry\";\nimport PhotoRenderer from \"../renderers/PhotoRenderer\";\nimport ColumnContainerRenderer from \"../renderers/ColumnContainerRenderer\";\nimport {\n    ColumnsLayoutOptions,\n    ComponentsProps,\n    Instrumentation,\n    Photo,\n    RenderColumnContainer,\n    RenderPhoto,\n} from \"../../types\";\n\ntype MasonryLayoutProps<T extends Photo = Photo> = {\n    photos: T[];\n    layoutOptions: ColumnsLayoutOptions;\n    renderPhoto?: RenderPhoto<T>;\n    renderColumnContainer?: RenderColumnContainer;\n    componentsProps?: ComponentsProps;\n    instrumentation?: Instrumentation;\n};\n\nconst MasonryLayout = <T extends Photo = Photo>(props: MasonryLayoutProps<T>): JSX.Element => {\n    const { photos, layoutOptions, renderPhoto, renderColumnContainer, componentsProps, instrumentation } = props;\n\n    const masonryLayout = computeMasonryLayout({ photos, layoutOptions, instrumentation });\n\n    if (masonryLayout === undefined) return <></>;\n\n    return (\n        <>\n            {masonryLayout.map((column, columnIndex) => (\n                <ColumnContainerRenderer\n                    key={`masonry-column-${columnIndex}`}\n                    layoutOptions={layoutOptions}\n                    columnsCount={masonryLayout.length}\n                    columnIndex={columnIndex}\n                    renderColumnContainer={renderColumnContainer}\n                    columnContainerProps={componentsProps?.columnContainerProps}\n                >\n                    {column.map(({ photo, layout }) => (\n                        <PhotoRenderer\n                            key={photo.key || photo.src}\n                            photo={photo}\n                            layout={layout}\n                            layoutOptions={layoutOptions}\n                            renderPhoto={renderPhoto}\n                            imageProps={componentsProps?.imageProps}\n                        />\n                    ))}\n                </ColumnContainerRenderer>\n            ))}\n        </>\n    );\n};\n\nexport default MasonryLayout;\n","import * as React from \"react\";\nimport { CSSProperties, ForwardRefExoticComponent, PropsWithChildren, RefAttributes } from \"react\";\n\nimport { ContainerProps, RenderContainer, RenderContainerProps } from \"../../types\";\n\nconst defaultRenderContainer = ({ containerProps, children, containerRef }: RenderContainerProps) => (\n    <div ref={containerRef} {...containerProps}>\n        {children}\n    </div>\n);\n\ntype ContainerRendererProps = Omit<RenderContainerProps, \"containerProps\"> &\n    Pick<Partial<RenderContainerProps>, \"containerProps\"> & { renderContainer?: RenderContainer };\n\nconst ContainerRenderer = (props: ContainerRendererProps) => {\n    const {\n        layoutOptions,\n        renderContainer,\n        children,\n        containerRef,\n        containerProps: { style, ...restContainerProps } = {},\n    } = props;\n    const { layout } = layoutOptions;\n\n    const containerProps = {\n        className: `react-photo-album react-photo-album--${layout}`,\n        style: {\n            display: \"flex\",\n            flexWrap: \"nowrap\",\n            justifyContent: \"space-between\",\n            flexDirection: layout === \"rows\" ? \"column\" : \"row\",\n            ...style,\n        } as CSSProperties,\n        ...restContainerProps,\n    };\n\n    // we are dealing with deprecated exotic component returned by forwardRef\n    if (renderContainer && typeof renderContainer === \"object\") {\n        const Component = renderContainer as ForwardRefExoticComponent<\n            PropsWithChildren<ContainerProps> & RefAttributes<HTMLDivElement>\n        >;\n\n        return (\n            <Component ref={containerRef} layoutOptions={layoutOptions} containerProps={containerProps}>\n                {children}\n            </Component>\n        );\n    }\n\n    return (renderContainer ?? defaultRenderContainer)({\n        containerProps,\n        containerRef,\n        layoutOptions,\n        children,\n    });\n};\n\nexport default ContainerRenderer;\n","import { useEffect, useLayoutEffect } from \"react\";\n\n/* istanbul ignore next */\nexport default typeof document !== \"undefined\" ? useLayoutEffect : useEffect;\n","import { useState } from \"react\";\nimport useLayoutEffect from \"./useLayoutEffect\";\n\nconst useMounted = () => {\n    const [mounted, setMounted] = useState(false);\n\n    useLayoutEffect(() => {\n        setMounted(true);\n        return () => setMounted(false);\n    }, []);\n\n    return mounted;\n};\n\nexport default useMounted;\n","import { useCallback, useMemo, useRef, useState } from \"react\";\nimport { ResizeObserverProvider } from \"../types\";\n\nconst useContainerWidth = (resizeObserverProvider?: ResizeObserverProvider, breakpoints?: number[]) => {\n    const observerRef = useRef<ResizeObserver>();\n    const [containerWidth, setContainerWidth] = useState<number>();\n\n    const containerRef = useCallback(\n        (node) => {\n            if (observerRef.current) {\n                observerRef.current.disconnect();\n                observerRef.current = undefined;\n            }\n\n            const updateWidth = () => {\n                let newWidth = node?.clientWidth;\n\n                if (newWidth !== undefined && breakpoints && breakpoints.length > 0) {\n                    const sortedBreakpoints = [...breakpoints.filter((x) => x > 0)].sort((a, b) => b - a);\n                    sortedBreakpoints.push(Math.floor(sortedBreakpoints[sortedBreakpoints.length - 1] / 2));\n                    newWidth = sortedBreakpoints.find(\n                        (breakpoint, index) => breakpoint <= newWidth || index === sortedBreakpoints.length - 1\n                    );\n                }\n\n                setContainerWidth(newWidth);\n            };\n\n            updateWidth();\n\n            if (node) {\n                observerRef.current =\n                    typeof ResizeObserver !== \"undefined\"\n                        ? new ResizeObserver(updateWidth)\n                        : resizeObserverProvider?.(updateWidth);\n\n                observerRef.current?.observe(node);\n            }\n        },\n        [resizeObserverProvider, breakpoints]\n    );\n\n    return useMemo(() => ({ containerRef, containerWidth }), [containerRef, containerWidth]);\n};\n\nexport default useContainerWidth;\n","import { ResponsiveParameter } from \"../types\";\n\nconst breakpoints = Object.freeze([1200, 600, 300, 0]);\n\nconst unwrap = (value: ResponsiveParameter, containerWidth: number): number =>\n    typeof value === \"function\" ? value(containerWidth) : value;\n\nconst unwrapParameter = (value: ResponsiveParameter | undefined, containerWidth: number): number | undefined =>\n    typeof value !== \"undefined\" ? unwrap(value, containerWidth) : undefined;\n\nconst selectResponsiveValue = (values: ResponsiveParameter[], containerWidth: number): number => {\n    const index = breakpoints.findIndex((breakpoint) => breakpoint <= containerWidth);\n    return unwrap(values[index >= 0 ? index : 0], containerWidth);\n};\n\nconst resolveResponsiveParameter = (\n    parameter: ResponsiveParameter | undefined,\n    containerWidth: number,\n    values: ResponsiveParameter[]\n): number => {\n    const value = unwrapParameter(parameter, containerWidth);\n    return value === undefined ? selectResponsiveValue(values, containerWidth) : value;\n};\n\nexport default resolveResponsiveParameter;\n","import * as React from \"react\";\n\nimport RowsLayout from \"./components/layouts/RowsLayout\";\nimport ColumnsLayout from \"./components/layouts/ColumnsLayout\";\nimport MasonryLayout from \"./components/layouts/MasonryLayout\";\nimport ContainerRenderer from \"./components/renderers/ContainerRenderer\";\nimport useMounted from \"./hooks/useMounted\";\nimport useContainerWidth from \"./hooks/useContainerWidth\";\nimport resolveResponsiveParameter from \"./utils/responsive\";\nimport { ColumnsLayoutOptions, ComponentsPropsParameter, Photo, PhotoAlbumProps, RowsLayoutOptions } from \"./types\";\n\nconst resolveLayoutOptions = <T extends Photo>({\n    layout,\n    onClick,\n    viewportWidth,\n    containerWidth,\n    targetRowHeight,\n    rowConstraints,\n    columns,\n    spacing,\n    padding,\n    sizes,\n}: Omit<PhotoAlbumProps<T>, \"photos\"> & {\n    viewportWidth?: number;\n    containerWidth: number;\n}): RowsLayoutOptions | ColumnsLayoutOptions => ({\n    layout,\n    onClick,\n    viewportWidth,\n    containerWidth,\n    columns: resolveResponsiveParameter(columns, containerWidth, [5, 4, 3, 2]),\n    spacing: resolveResponsiveParameter(spacing, containerWidth, [20, 15, 10, 5]),\n    padding: resolveResponsiveParameter(padding, containerWidth, [0, 0, 0, 0, 0]),\n    targetRowHeight: resolveResponsiveParameter(targetRowHeight, containerWidth, [\n        (w) => w / 5,\n        (w) => w / 4,\n        (w) => w / 3,\n        (w) => w / 2,\n    ]),\n    sizes,\n    rowConstraints,\n});\n\nconst resolveComponentsProps = (componentsProps: ComponentsPropsParameter | undefined, containerWidth: number) => {\n    return typeof componentsProps === \"function\" ? componentsProps(containerWidth) : componentsProps;\n};\n\nconst PhotoAlbum = <T extends Photo>(props: PhotoAlbumProps<T>): JSX.Element => {\n    const {\n        photos,\n        layout,\n        renderPhoto,\n        renderContainer,\n        renderRowContainer,\n        renderColumnContainer,\n        defaultContainerWidth,\n        resizeObserverProvider,\n        breakpoints,\n        instrumentation,\n    } = props;\n\n    const mounted = useMounted();\n    const { containerRef, containerWidth } = useContainerWidth(resizeObserverProvider, breakpoints);\n\n    // safeguard against incorrect usage\n    if (!layout || ![\"rows\", \"columns\", \"masonry\"].includes(layout) || !Array.isArray(photos)) return <></>;\n\n    const layoutOptions = resolveLayoutOptions({\n        containerWidth: (mounted && containerWidth) || defaultContainerWidth || 800,\n        viewportWidth: (mounted && window.innerWidth) || undefined,\n        ...props,\n    });\n\n    const componentsProps = resolveComponentsProps(props.componentsProps, layoutOptions.containerWidth);\n\n    const commonLayoutProps = { photos, renderPhoto, componentsProps, instrumentation };\n\n    return (\n        <ContainerRenderer\n            containerRef={containerRef}\n            layoutOptions={layoutOptions}\n            renderContainer={renderContainer}\n            containerProps={componentsProps?.containerProps}\n        >\n            {layout === \"rows\" ? (\n                <RowsLayout\n                    layoutOptions={layoutOptions as RowsLayoutOptions}\n                    renderRowContainer={renderRowContainer}\n                    {...commonLayoutProps}\n                />\n            ) : layout === \"columns\" ? (\n                <ColumnsLayout\n                    layoutOptions={layoutOptions as ColumnsLayoutOptions}\n                    renderColumnContainer={renderColumnContainer}\n                    {...commonLayoutProps}\n                />\n            ) : (\n                <MasonryLayout\n                    layoutOptions={layoutOptions as ColumnsLayoutOptions}\n                    renderColumnContainer={renderColumnContainer}\n                    {...commonLayoutProps}\n                />\n            )}\n        </ContainerRenderer>\n    );\n};\n\nexport default PhotoAlbum;\n"],"names":["ratio","width","height","round","value","decimals","factor","Math","Number","EPSILON","RankingFunctionComparator","rank","a","b","MinHeap","comparator","heap","compare","n","greater","i","j","swap","temp","swim","k","k2","sink","push","element","pop","undefined","max","size","buildPrecedentsMap","graph","startNode","endNode","precedentsMap","visited","storedShortestPaths","pQueue","el","weight","id","shortestNode","shortestNodeId","neighboringNodes","neighbor","newTotalWeight","getPathFromPrecedentsMap","nodes","reverse","findShortestPath","findIdealNodeSearch","photos","targetRowHeight","containerWidth","minRatio","reduce","acc","photo","min","MAX_VALUE","getCommonHeight","row","spacing","padding","rowWidth","length","totalAspectRatio","cost","slice","commonHeight","makeGetNeighbors","layoutOptions","limitNodeSearch","rowConstraints","instrumentation","node","results","start","startOffset","_a","minPhotos","endOffset","_b","maxPhotos","Infinity","fullGraphSearch","currentCost","toString","computeRowsLayout","onStartLayoutComputation","getNeighbors","path","result","map","index","photoIndex","layout","photosCount","onFinishLayoutComputation","call","calcWidth","base","gaps","cssWidth","calculateSizesValue","match","srcSetAndSizes","srcSet","sizes","images","concat","src","sort","first","second","image","join","viewport","ceil","viewportWidth","defaultRenderPhoto","imageProps","alt","rest","_excluded","_jsx","PhotoRenderer","props","style","restImageProps","_excluded2","renderPhoto","onClick","imageStyle","display","boxSizing","aspectRatio","marginBottom","cursor","handleClick","event","title","className","defaultRenderRowContainer","rowContainerProps","children","RowContainerRenderer","rowIndex","rowsCount","renderRowContainer","restRowContainerProps","flexDirection","flexWrap","alignItems","justifyContent","RowsLayout","componentsProps","rowsLayout","key","computeShortestPath","pathLength","comp","queue","Object","keys","forEach","accumulatedWeight","reconstructShortestPath","prevNode","findShortestPathLengthN","targetColumnWidth","targetColumnHeight","cutOffHeight","buildColumnsModel","columnsGaps","columnsRatios","columnsModel","totalRatio","column","totalAdjustedGaps","columnWidth","computeColumnsModel","columns","Array","from","_","computeLayout","findIndex","columnModel","computeColumnsLayout","defaultRenderColumnContainer","columnContainerProps","columnIndex","columnsCount","ColumnContainerRenderer","renderColumnContainer","restColumnContainerProps","ColumnsLayout","columnsLayout","_Fragment","computeMasonryLayout","columnsCurrentTopPositions","shortestColumn","item","MasonryLayout","masonryLayout","defaultRenderContainer","containerProps","containerRef","ref","ContainerRenderer","renderContainer","restContainerProps","Component","document","useLayoutEffect","useEffect","useMounted","useState","mounted","setMounted","useContainerWidth","resizeObserverProvider","breakpoints","observerRef","useRef","setContainerWidth","useCallback","current","disconnect","updateWidth","newWidth","clientWidth","sortedBreakpoints","filter","x","floor","find","breakpoint","ResizeObserver","observe","useMemo","freeze","unwrap","unwrapParameter","selectResponsiveValue","values","resolveResponsiveParameter","parameter","resolveLayoutOptions","w","resolveComponentsProps","PhotoAlbum","defaultContainerWidth","includes","isArray","window","innerWidth","commonLayoutProps"],"mappings":"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"}