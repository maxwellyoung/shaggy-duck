{"version":3,"file":"index.umd.js","sources":["../src/utils/ratio.ts","../src/utils/round.ts","../src/utils/heap.ts","../src/utils/dijkstra.ts","../src/layouts/rows.ts","../src/components/renderers/PhotoRenderer.tsx","../src/components/renderers/RowContainerRenderer.tsx","../src/components/layouts/RowsLayout.tsx","../src/utils/shortestPath.ts","../src/layouts/columns.ts","../src/components/renderers/ColumnContainerRenderer.tsx","../src/components/layouts/ColumnsLayout.tsx","../src/layouts/masonry.ts","../src/components/layouts/MasonryLayout.tsx","../src/components/renderers/ContainerRenderer.tsx","../src/hooks/useLayoutEffect.ts","../src/utils/responsive.ts","../src/PhotoAlbum.tsx","../src/hooks/useMounted.ts","../src/hooks/useContainerWidth.ts"],"sourcesContent":["const ratio = ({ width, height }: { width: number; height: number }) => width / height;\n\nexport default ratio;\n","// round a value to a specified number of decimal places\nconst round = (value: number, decimals = 0) => {\n    const factor = 10 ** decimals;\n    return Math.round((value + Number.EPSILON) * factor) / factor;\n};\n\nexport default round;\n","type Comparator<T> = (a: T, b: T) => number;\n\nexport const RankingFunctionComparator =\n    <T>(rank: (element: T) => number) =>\n    (a: T, b: T) =>\n        rank(b) - rank(a);\n\nexport const NumericComparator = RankingFunctionComparator<number>((x: number) => x);\n\n/**\n * Min heap implementation.\n * Comparator function is expected to return a positive number, zero or a negative number if a > b, a === b or a < b.\n */\nconst MinHeap = <T>(comparator: Comparator<T>) => {\n    // heap-ordered complete binary tree in heap[1..n] with heap[0] unused\n    const heap: T[] = [];\n    const compare = comparator;\n    let n = 0;\n\n    // comparator function\n    const greater = (i: number, j: number) => compare(heap[i], heap[j]) < 0;\n\n    // swap two elements\n    const swap = (i: number, j: number) => {\n        const temp = heap[i];\n        heap[i] = heap[j];\n        heap[j] = temp;\n    };\n\n    // bubble k-th element up\n    const swim = (k: number) => {\n        let k2 = k >> 1;\n        while (k > 1 && greater(k2, k)) {\n            swap(k2, k);\n            k = k2;\n            k2 = k >> 1;\n        }\n    };\n\n    // bubble k-th element down\n    const sink = (k: number) => {\n        let j = k << 1;\n        while (j <= n) {\n            if (j < n && greater(j, j + 1)) j++;\n            if (!greater(k, j)) break;\n            swap(k, j);\n            k = j;\n            j = k << 1;\n        }\n    };\n\n    return {\n        /** add element to the heap */\n        push: (element: T) => {\n            n += 1;\n            heap[n] = element;\n            swim(n);\n        },\n\n        /** remove the first element from the heap */\n        pop: (): T | undefined => {\n            if (n === 0) return undefined;\n            swap(1, n);\n            n -= 1;\n            const max = heap.pop();\n            sink(1);\n            return max;\n        },\n\n        /** heap size */\n        size: (): number => n,\n    };\n};\n\nexport default MinHeap;\n","import MinHeap, { RankingFunctionComparator } from \"./heap\";\n\ntype Element = string;\n\ntype HeapElement = {\n    id: string;\n    weight: number;\n};\n\ntype ElementToElementMap = {\n    [key: Element]: Element;\n};\n\ntype ElementToNumberMap = {\n    [key: Element]: number;\n};\n\ntype GraphFunction = (node: string) => { [key: string]: number };\n\nconst buildPrecedentsMap = (graph: GraphFunction, startNode: Element, endNode: Element) => {\n    // store the previous vertex of the shortest path of arrival\n    const precedentsMap: ElementToElementMap = {};\n\n    // store nodes already visited\n    const visited: ElementToNumberMap = {};\n\n    // store/update only the shortest edge weights measured\n    // the purpose of this is object is constant time lookup vs. binary heap lookup O(n)\n    const storedShortestPaths: ElementToNumberMap = {};\n    storedShortestPaths[startNode] = 0;\n\n    // priority queue of ALL nodes and storedShortestPaths\n    // don't bother to delete them because it's faster to look at visited?\n    const pQueue = MinHeap<HeapElement>(RankingFunctionComparator((el: HeapElement): number => el.weight));\n    pQueue.push({ id: startNode, weight: 0 });\n\n    let shortestNode;\n    // pop a node with the shortest total weight from start node\n    while ((shortestNode = pQueue.pop()) !== undefined) {\n        const shortestNodeId = shortestNode.id;\n\n        // if already visited, continue\n        if (visited[shortestNodeId]) continue;\n\n        // visit neighboring nodes\n        const neighboringNodes = graph(shortestNodeId);\n        visited[shortestNodeId] = 1;\n\n        // meet the neighbors, looking for shorter paths\n        for (const neighbor in neighboringNodes) {\n            // weight of path from startNode to this neighbor\n            const newTotalWeight = shortestNode.weight + neighboringNodes[neighbor];\n\n            // if this is the first time meeting the neighbor OR if the new total weight from\n            // start node to this neighbor node is greater than the old weight path, update it,\n            // and update precedent node\n            //\n            // introducing deterministic tiebreaker to guard against edge cases where path weight difference can be\n            // as low as 1e-12, which leads to visual flickering during subsequent re-renders as layout continues to\n            // shift back and forth\n            if (\n                storedShortestPaths[neighbor] === undefined ||\n                (storedShortestPaths[neighbor] > newTotalWeight &&\n                    (storedShortestPaths[neighbor] / newTotalWeight > 1.005 ||\n                        precedentsMap[neighbor] < shortestNodeId))\n            ) {\n                storedShortestPaths[neighbor] = newTotalWeight;\n                pQueue.push({ id: neighbor, weight: newTotalWeight });\n                precedentsMap[neighbor] = shortestNodeId;\n            }\n        }\n    }\n\n    if (typeof storedShortestPaths[endNode] === \"undefined\") {\n        // encountered impossible layout\n        return undefined;\n    }\n\n    return precedentsMap;\n};\n\n// build the route from precedent node vertices\nconst getPathFromPrecedentsMap = (precedentsMap: ElementToElementMap, endNode: Element) => {\n    const nodes = [];\n    let n = endNode;\n    while (n) {\n        nodes.push(n);\n        n = precedentsMap[n];\n    }\n    return nodes.reverse();\n};\n\n// build the precedentsMap and find the shortest path from it\nexport const findShortestPath = (graph: GraphFunction, startNode: Element, endNode: Element) => {\n    const precedentsMap = buildPrecedentsMap(graph, startNode, endNode);\n    return precedentsMap !== undefined ? getPathFromPrecedentsMap(precedentsMap, endNode) : undefined;\n};\n","import ratio from \"../utils/ratio\";\nimport round from \"../utils/round\";\nimport { findShortestPath } from \"../utils/dijkstra\";\nimport { Instrumentation, Photo, PhotoLayout, RowConstraints, RowsLayoutOptions } from \"../types\";\n\n// guesstimate how many neighboring nodes should be searched based on\n// the aspect columnRatio of the container with images and minimal aspect columnRatio of all photos\n// as the maximum amount of photos per row, plus some nodes\nconst findIdealNodeSearch = ({\n    photos,\n    targetRowHeight,\n    containerWidth,\n}: {\n    photos: Array<Photo>;\n    targetRowHeight: number;\n    containerWidth: number;\n}): number => {\n    const minRatio = photos.reduce((acc, photo) => Math.min(ratio(photo), acc), Number.MAX_VALUE);\n    return round(containerWidth / targetRowHeight / minRatio) + 2;\n};\n\n// compute sizes by creating a graph with rows as edges and photo to break on as nodes\n// to calculate the single best layout using Dijkstra's findShortestPat\n\n// get the height for a set of photos in a potential row\nconst getCommonHeight = (row: Array<Photo>, containerWidth: number, spacing: number, padding: number) => {\n    const rowWidth = containerWidth - (row.length - 1) * spacing - 2 * padding * row.length;\n    const totalAspectRatio = row.reduce((acc, photo) => acc + ratio(photo), 0);\n    return rowWidth / totalAspectRatio;\n};\n\n// calculate the cost of breaking at this node (edge weight)\nconst cost = (\n    photos: Array<Photo>,\n    i: number,\n    j: number,\n    width: number,\n    targetRowHeight: number,\n    spacing: number,\n    padding: number\n) => {\n    const row = photos.slice(i, j);\n    const commonHeight = getCommonHeight(row, width, spacing, padding);\n    return commonHeight > 0 ? (commonHeight - targetRowHeight) ** 2 * row.length : undefined;\n};\n\n// return function that gets the neighboring nodes of node and returns costs\nconst makeGetNeighbors =\n    ({\n        photos,\n        layoutOptions,\n        targetRowHeight,\n        limitNodeSearch,\n        rowConstraints,\n        instrumentation,\n    }: {\n        photos: Array<Photo>;\n        layoutOptions: RowsLayoutOptions;\n        targetRowHeight: number;\n        limitNodeSearch: number;\n        rowConstraints?: RowConstraints;\n        instrumentation?: Instrumentation;\n    }) =>\n    (node: string) => {\n        const { containerWidth, spacing, padding } = layoutOptions;\n        const results: { [key: string]: number } = {};\n        const start = +node;\n        results[+start] = 0;\n        const startOffset = rowConstraints?.minPhotos ?? 1;\n        const endOffset = Math.min(limitNodeSearch, rowConstraints?.maxPhotos ?? Infinity);\n        for (let i = start + startOffset; i < photos.length + 1; i += 1) {\n            if (i - start > endOffset && !instrumentation?.fullGraphSearch) break;\n            const currentCost = cost(photos, start, i, containerWidth, targetRowHeight, spacing, padding);\n            if (currentCost === undefined) break;\n            results[i.toString()] = currentCost;\n        }\n        return results;\n    };\n\ntype RowsLayoutModel<T extends Photo = Photo> = { photo: T; layout: PhotoLayout }[][] | undefined;\n\nconst computeRowsLayout = <T extends Photo = Photo>({\n    photos,\n    layoutOptions,\n    instrumentation,\n}: {\n    photos: T[];\n    layoutOptions: RowsLayoutOptions;\n    instrumentation?: Instrumentation;\n}): RowsLayoutModel<T> => {\n    const { spacing, padding, containerWidth, targetRowHeight, rowConstraints } = layoutOptions;\n\n    instrumentation?.onStartLayoutComputation?.();\n\n    const limitNodeSearch = findIdealNodeSearch({ photos, containerWidth, targetRowHeight });\n\n    const getNeighbors = makeGetNeighbors({\n        photos,\n        layoutOptions,\n        targetRowHeight,\n        limitNodeSearch,\n        rowConstraints,\n        instrumentation,\n    });\n\n    const path = findShortestPath(getNeighbors, \"0\", `${photos.length}`);\n\n    // impossible layout\n    if (path === undefined) return undefined;\n\n    const result = [];\n\n    for (let i = 1; i < path.length; i += 1) {\n        const row = photos.map((photo, index) => ({ photo, index })).slice(+path[i - 1], +path[i]);\n        const height = getCommonHeight(\n            row.map(({ photo }) => photo),\n            containerWidth,\n            spacing,\n            padding\n        );\n        result.push(\n            row.map(({ photo, index }, photoIndex) => ({\n                photo,\n                layout: {\n                    height,\n                    width: height * ratio(photo),\n                    index,\n                    photoIndex,\n                    photosCount: row.length,\n                },\n            }))\n        );\n    }\n\n    instrumentation?.onFinishLayoutComputation?.(result);\n\n    return result;\n};\n\nexport default computeRowsLayout;\n","import * as React from \"react\";\nimport { CSSProperties, HTMLAttributes, MouseEvent } from \"react\";\n\nimport round from \"../../utils/round\";\nimport { LayoutOptions, Photo, PhotoLayout, PhotoProps, RenderPhoto } from \"../../types\";\n\nconst calcWidth = (\n    base: string,\n    { width, photosCount }: PhotoLayout,\n    { spacing, padding, containerWidth }: LayoutOptions\n) => {\n    const gaps = spacing * (photosCount - 1) + 2 * padding * photosCount;\n    return `calc((${base} - ${gaps}px) / ${round((containerWidth - gaps) / width, 5)})`;\n};\n\nconst cssWidth = (layout: PhotoLayout, layoutOptions: LayoutOptions) => {\n    if (layoutOptions.layout !== \"rows\") {\n        return `calc(100% - ${2 * layoutOptions.padding}px)`;\n    }\n    return calcWidth(\"100%\", layout, layoutOptions);\n};\n\nconst calculateSizesValue = (size: string, layout: PhotoLayout, layoutOptions: LayoutOptions) =>\n    calcWidth(size.match(/calc\\((.*)\\)/)?.[1] ?? size, layout, layoutOptions);\n\nconst srcSetAndSizes = <T extends Photo = Photo>(photo: T, layout: PhotoLayout, layoutOptions: LayoutOptions) => {\n    let srcSet, sizes;\n\n    if (photo.images && photo.images.length > 0) {\n        srcSet = photo.images\n            .concat([\n                {\n                    src: photo.src,\n                    width: photo.width,\n                    height: photo.height,\n                },\n            ])\n            .sort((first, second) => first.width - second.width)\n            .map((image) => `${image.src} ${image.width}w`)\n            .join(\", \");\n    }\n\n    if (layoutOptions.sizes) {\n        sizes = (layoutOptions.sizes.sizes || [])\n            .map(({ viewport, size }) => `${viewport} ${calculateSizesValue(size, layout, layoutOptions)}`)\n            .concat(calculateSizesValue(layoutOptions.sizes.size, layout, layoutOptions))\n            .join(\", \");\n    } else {\n        sizes = `${Math.ceil((layout.width / (layoutOptions.viewportWidth || layoutOptions.containerWidth)) * 100)}vw`;\n    }\n\n    return { srcSet, sizes };\n};\n\nconst defaultRenderPhoto: RenderPhoto = ({ imageProps }) => {\n    const { src, alt, srcSet, sizes, ...rest } = imageProps;\n    return <img src={src} alt={alt} {...(srcSet ? { srcSet, sizes } : null)} {...rest} />;\n};\n\ntype PhotoRendererProps<T extends Photo = Photo> = Omit<PhotoProps<T>, \"imageProps\"> & {\n    imageProps?: HTMLAttributes<HTMLImageElement>;\n} & { renderPhoto?: RenderPhoto<T> };\n\nconst PhotoRenderer = <T extends Photo = Photo>(props: PhotoRendererProps<T>) => {\n    const { photo, layout, layoutOptions, imageProps: { style, ...restImageProps } = {}, renderPhoto } = props;\n    const { onClick } = layoutOptions;\n\n    const imageStyle = {\n        display: \"block\",\n        boxSizing: \"content-box\",\n        width: cssWidth(layout, layoutOptions),\n        height: \"auto\",\n        aspectRatio: `${photo.width} / ${photo.height}`,\n        ...(layoutOptions.padding ? { padding: `${layoutOptions.padding}px` } : null),\n        ...((layoutOptions.layout === \"columns\" || layoutOptions.layout === \"masonry\") &&\n        layout.photoIndex < layout.photosCount - 1\n            ? { marginBottom: `${layoutOptions.spacing}px` }\n            : null),\n        ...(onClick ? { cursor: \"pointer\" } : null),\n        ...style,\n    } as CSSProperties;\n\n    const handleClick = onClick\n        ? (event: MouseEvent) => {\n              onClick(event, photo, layout.index);\n          }\n        : undefined;\n\n    const imageProps = {\n        src: photo.src,\n        alt: photo.alt ?? \"\",\n        title: photo.title,\n        onClick: handleClick,\n        style: imageStyle,\n        className: \"react-photo-album--photo\",\n        ...srcSetAndSizes(photo, layout, layoutOptions),\n        ...restImageProps,\n    };\n\n    return (renderPhoto ?? defaultRenderPhoto)({ photo, layout, layoutOptions, imageProps });\n};\n\nexport default PhotoRenderer;\n","import * as React from \"react\";\nimport { CSSProperties, PropsWithChildren } from \"react\";\n\nimport { RenderRowContainer, RowContainerProps } from \"../../types\";\n\nconst defaultRenderRowContainer: RenderRowContainer = ({ rowContainerProps, children }) => (\n    <div {...rowContainerProps}>{children}</div>\n);\n\ntype RowContainerRendererProps = PropsWithChildren<\n    Omit<RowContainerProps, \"rowContainerProps\"> & Pick<Partial<RowContainerProps>, \"rowContainerProps\">\n> & {\n    renderRowContainer?: RenderRowContainer;\n};\n\nconst RowContainerRenderer = (props: RowContainerRendererProps) => {\n    const {\n        layoutOptions,\n        rowIndex,\n        rowsCount,\n        renderRowContainer,\n        rowContainerProps: { style, ...restRowContainerProps } = {},\n        children,\n    } = props;\n\n    const rowContainerProps = {\n        className: \"react-photo-album--row\",\n        style: {\n            display: \"flex\",\n            flexDirection: \"row\",\n            flexWrap: \"nowrap\",\n            alignItems: \"flex-start\",\n            justifyContent: \"space-between\",\n            ...(rowIndex < rowsCount - 1 ? { marginBottom: `${layoutOptions.spacing}px` } : null),\n            ...style,\n        } as CSSProperties,\n        ...restRowContainerProps,\n    };\n\n    return (renderRowContainer ?? defaultRenderRowContainer)({\n        layoutOptions,\n        rowIndex,\n        rowsCount,\n        rowContainerProps,\n        children,\n    });\n};\n\nexport default RowContainerRenderer;\n","import * as React from \"react\";\n\nimport computeRowsLayout from \"../../layouts/rows\";\nimport PhotoRenderer from \"../renderers/PhotoRenderer\";\nimport RowContainerRenderer from \"../renderers/RowContainerRenderer\";\nimport {\n    ComponentsProps,\n    Instrumentation,\n    Photo,\n    RenderPhoto,\n    RenderRowContainer,\n    RowsLayoutOptions,\n} from \"../../types\";\n\ntype RowsLayoutProps<T extends Photo = Photo> = {\n    photos: T[];\n    layoutOptions: RowsLayoutOptions;\n    renderPhoto?: RenderPhoto<T>;\n    renderRowContainer?: RenderRowContainer;\n    componentsProps?: ComponentsProps;\n    instrumentation?: Instrumentation;\n};\n\nconst RowsLayout = <T extends Photo = Photo>(props: RowsLayoutProps<T>): JSX.Element => {\n    const { photos, layoutOptions, renderPhoto, renderRowContainer, componentsProps, instrumentation } = props;\n\n    const rowsLayout = computeRowsLayout({ photos, layoutOptions, instrumentation });\n\n    if (rowsLayout === undefined) return <></>;\n\n    return (\n        <>\n            {rowsLayout.map((row, rowIndex) => (\n                <RowContainerRenderer\n                    key={`row-${rowIndex}`}\n                    layoutOptions={layoutOptions}\n                    rowIndex={rowIndex}\n                    rowsCount={rowsLayout.length}\n                    renderRowContainer={renderRowContainer}\n                    rowContainerProps={componentsProps?.rowContainerProps}\n                >\n                    {row.map(({ photo, layout }) => (\n                        <PhotoRenderer\n                            key={photo.key || photo.src}\n                            photo={photo}\n                            layout={layout}\n                            layoutOptions={layoutOptions}\n                            renderPhoto={renderPhoto}\n                            imageProps={componentsProps?.imageProps}\n                        />\n                    ))}\n                </RowContainerRenderer>\n            ))}\n        </>\n    );\n};\n\nexport default RowsLayout;\n","type GraphFunction = (node: number) => Array<{ neighbor: number; weight: number }>;\n\ntype Comp = number[][][];\n\nconst computeShortestPath = (graph: GraphFunction, pathLength: number, startNode: number, endNode: number) => {\n    // computation matrix: node id x path length x [previous node id, path weight]\n    // i.e. element in comp[X][k] represents previous node and path weight of the best path of length k\n    // from the starting node to node X\n    const comp: Comp = [];\n\n    // sorted set of neighboring nodes that need to be visited\n    // i.e. queue[k][X] represents node X with partial path of length k\n    const queue: { [key: number]: { [key: number]: object | null } } = { 0: { [startNode]: null } };\n\n    for (let length = 0; length < pathLength; length += 1) {\n        Object.keys(queue[length]).forEach((n) => {\n            const node = +n;\n            const accumulatedWeight = length > 0 && comp[node][length] ? comp[node][length][1] : 0;\n\n            graph(node).forEach(({ neighbor, weight }) => {\n                if (!comp[neighbor]) {\n                    comp[neighbor] = [];\n                }\n\n                // introducing deterministic tiebreaker to guard against edge cases where path weight difference can be\n                // as low as 1e-12, which leads to visual flickering during subsequent re-renders as layout continues to\n                // shift back and forth\n                const newTotalWeight = accumulatedWeight + weight;\n                if (\n                    !comp[neighbor][length + 1] ||\n                    (comp[neighbor][length + 1][1] > newTotalWeight &&\n                        (comp[neighbor][length + 1][1] / newTotalWeight > 1.0001 ||\n                            node < comp[neighbor][length + 1][0]))\n                ) {\n                    comp[neighbor][length + 1] = [node, newTotalWeight];\n                }\n\n                if (length < pathLength - 1 && neighbor !== endNode) {\n                    if (!queue[length + 1]) {\n                        queue[length + 1] = {};\n                    }\n                    queue[length + 1][neighbor] = null;\n                }\n            });\n        });\n    }\n    return comp;\n};\n\nconst reconstructShortestPath = (comp: Comp, pathLength: number, endNode: number) => {\n    const path = [endNode];\n    for (let node = endNode, length = pathLength; length > 0; length -= 1) {\n        const [prevNode] = comp[node][length];\n        node = prevNode;\n        path.push(node);\n    }\n    return path.reverse();\n};\n\n// Find the shortest path of length N in a weighted directed graph using dynamic programming algorithm.\nconst findShortestPathLengthN = (graph: GraphFunction, pathLength: number, startNode: number, endNode: number) =>\n    reconstructShortestPath(computeShortestPath(graph, pathLength, startNode, endNode), pathLength, endNode);\n\nexport default findShortestPathLengthN;\n","import ratio from \"../utils/ratio\";\nimport findShortestPathLengthN from \"../utils/shortestPath\";\nimport { ColumnsLayoutOptions, Instrumentation, Photo, PhotoLayout } from \"../types\";\n\n// return function that gets the neighboring nodes of node and returns costs\nconst makeGetNeighbors =\n    ({\n        photos,\n        spacing,\n        padding,\n        targetColumnWidth,\n        targetColumnHeight,\n        instrumentation,\n    }: {\n        photos: Array<Photo>;\n        spacing: number;\n        padding: number;\n        targetColumnWidth: number;\n        targetColumnHeight: number;\n        instrumentation?: Instrumentation;\n    }) =>\n    (node: number): Array<{ neighbor: number; weight: number }> => {\n        const results = [];\n        const cutOffHeight = targetColumnHeight * 1.5;\n        let height = targetColumnWidth / ratio(photos[node]) + 2 * padding;\n        for (let i = node + 1; i < photos.length + 1; i += 1) {\n            results.push({ neighbor: i, weight: (targetColumnHeight - height) ** 2 });\n            if ((height > cutOffHeight && !instrumentation?.fullGraphSearch) || i === photos.length) {\n                break;\n            }\n            height += targetColumnWidth / ratio(photos[i]) + spacing + 2 * padding;\n        }\n        return results;\n    };\n\nconst buildColumnsModel = <T extends Photo = Photo>({\n    path,\n    photos,\n    containerWidth,\n    columnsGaps,\n    columnsRatios,\n    spacing,\n    padding,\n}: {\n    path: number[];\n    photos: T[];\n    containerWidth: number;\n    columnsGaps: number[];\n    columnsRatios: number[];\n    spacing: number;\n    padding: number;\n}) => {\n    const columnsModel = [];\n\n    const totalRatio = columnsRatios.reduce((acc, ratio) => acc + ratio, 0);\n\n    for (let i = 0; i < path.length - 1; i += 1) {\n        const column = photos.map((photo, index) => ({ photo, index })).slice(path[i], path[i + 1]);\n\n        const totalAdjustedGaps = columnsRatios.reduce(\n            (acc, ratio, index) => acc + (columnsGaps[i] - columnsGaps[index]) * ratio,\n            0\n        );\n\n        const columnWidth =\n            ((containerWidth - (path.length - 2) * spacing - 2 * (path.length - 1) * padding - totalAdjustedGaps) *\n                columnsRatios[i]) /\n            totalRatio;\n\n        columnsModel.push(\n            column.map(({ photo, index }, photoIndex) => ({\n                photo,\n                layout: {\n                    width: columnWidth,\n                    height: columnWidth / ratio(photo),\n                    index,\n                    photoIndex,\n                    photosCount: column.length,\n                },\n            }))\n        );\n    }\n\n    return columnsModel;\n};\n\nconst computeColumnsModel = <T extends Photo = Photo>({\n    photos,\n    layoutOptions,\n    targetColumnWidth,\n    instrumentation,\n}: {\n    photos: T[];\n    layoutOptions: ColumnsLayoutOptions;\n    targetColumnWidth: number;\n    instrumentation?: Instrumentation;\n}) => {\n    const { columns, spacing, padding, containerWidth } = layoutOptions;\n\n    const columnsGaps: number[] = [];\n    const columnsRatios: number[] = [];\n\n    // fill first available columns if there are not enough photos\n    if (photos.length <= columns) {\n        for (let index = 0; index < photos.length; index += 1) {\n            columnsGaps[index] = 2 * padding;\n            columnsRatios[index] = ratio(photos[index]);\n        }\n\n        const columnsModel = buildColumnsModel({\n            path: Array.from({ length: photos.length + 1 }).map((_, index) => index),\n            photos,\n            columnsRatios,\n            columnsGaps,\n            containerWidth,\n            spacing,\n            padding,\n        });\n\n        return { columnsGaps, columnsRatios, columnsModel };\n    }\n\n    // target column height including spacing and padding\n    const targetColumnHeight =\n        (photos.reduce((acc, photo) => acc + targetColumnWidth / ratio(photo), 0) +\n            spacing * (photos.length - columns) +\n            2 * padding * photos.length) /\n        columns;\n\n    const getNeighbors = makeGetNeighbors({\n        photos,\n        targetColumnWidth,\n        targetColumnHeight,\n        spacing,\n        padding,\n        instrumentation,\n    });\n\n    const path = findShortestPathLengthN(getNeighbors, columns, 0, photos.length).map((node) => +node);\n\n    for (let i = 0; i < path.length - 1; i += 1) {\n        const column = photos.slice(path[i], path[i + 1]);\n        columnsGaps[i] = spacing * (column.length - 1) + 2 * padding * column.length;\n        columnsRatios[i] = 1 / column.reduce((acc, photo) => acc + 1 / ratio(photo), 0);\n    }\n\n    const columnsModel = buildColumnsModel({\n        path,\n        photos,\n        columnsRatios,\n        columnsGaps,\n        containerWidth,\n        spacing,\n        padding,\n    });\n\n    return { columnsGaps, columnsRatios, columnsModel };\n};\n\ntype ComputeColumnsLayoutProps<T extends Photo = Photo> = {\n    photos: T[];\n    layoutOptions: ColumnsLayoutOptions;\n    instrumentation?: Instrumentation;\n};\n\ntype ColumnsLayoutModel<T extends Photo = Photo> =\n    | {\n          columnsModel: { photo: T; layout: PhotoLayout }[][];\n          columnsRatios: number[];\n          columnsGaps: number[];\n      }\n    | undefined;\n\nconst computeLayout = <T extends Photo = Photo>(props: ComputeColumnsLayoutProps<T>): ColumnsLayoutModel<T> => {\n    const { photos, layoutOptions, instrumentation } = props;\n    const { columns, spacing, padding, containerWidth } = layoutOptions;\n\n    const targetColumnWidth = (containerWidth - spacing * (columns - 1) - 2 * padding * columns) / columns;\n\n    const { columnsGaps, columnsRatios, columnsModel } = computeColumnsModel({\n        photos,\n        layoutOptions,\n        targetColumnWidth,\n        instrumentation,\n    });\n\n    if (\n        columnsModel.findIndex(\n            (columnModel) => columnModel.findIndex(({ layout: { width, height } }) => width < 0 || height < 0) >= 0\n        ) >= 0\n    ) {\n        // encountered impossible layout\n        if (columns > 1) {\n            // will try to find a solution recursively with fewer columns\n            return computeLayout({\n                photos,\n                layoutOptions: {\n                    ...layoutOptions,\n                    columns: columns - 1,\n                },\n                instrumentation,\n            });\n        } else {\n            // bailing out\n            return undefined;\n        }\n    }\n\n    return { columnsModel, columnsGaps, columnsRatios };\n};\n\nconst computeColumnsLayout = <T extends Photo = Photo>({\n    photos,\n    layoutOptions,\n    instrumentation,\n}: ComputeColumnsLayoutProps<T>): ColumnsLayoutModel<T> => {\n    instrumentation?.onStartLayoutComputation?.();\n\n    const result = computeLayout({\n        photos,\n        layoutOptions: {\n            ...layoutOptions,\n            columns: Math.min(layoutOptions.columns, photos.length),\n        },\n        instrumentation,\n    });\n\n    instrumentation?.onFinishLayoutComputation?.(result);\n\n    return result;\n};\n\nexport default computeColumnsLayout;\n","import * as React from \"react\";\nimport { CSSProperties, PropsWithChildren } from \"react\";\n\nimport round from \"../../utils/round\";\nimport { ColumnContainerProps, RenderColumnContainer } from \"../../types\";\n\nconst defaultRenderColumnContainer: RenderColumnContainer = ({ columnContainerProps, children }) => (\n    <div {...columnContainerProps}>{children}</div>\n);\n\nconst cssWidth = (props: ColumnContainerRendererProps) => {\n    const { layoutOptions, columnIndex, columnsCount, columnsGaps, columnsRatios } = props;\n    const { layout, spacing, padding } = layoutOptions;\n\n    if (layout === \"masonry\" || !columnsGaps || !columnsRatios) {\n        return `calc((100% - ${spacing * (columnsCount - 1)}px) / ${columnsCount})`;\n    }\n\n    const totalRatio = columnsRatios.reduce((acc, ratio) => acc + ratio, 0);\n    const totalAdjustedGaps = columnsRatios.reduce(\n        (acc, ratio, index) => acc + (columnsGaps[columnIndex] - columnsGaps[index]) * ratio,\n        0\n    );\n\n    return `calc((100% - ${round(\n        (columnsCount - 1) * spacing + 2 * columnsCount * padding + totalAdjustedGaps,\n        3\n    )}px) * ${round(columnsRatios[columnIndex] / totalRatio, 5)} + ${2 * padding}px)`;\n};\n\ntype ColumnContainerRendererProps = PropsWithChildren<\n    Omit<ColumnContainerProps, \"columnContainerProps\"> & Pick<Partial<ColumnContainerProps>, \"columnContainerProps\">\n> & {\n    renderColumnContainer?: RenderColumnContainer;\n};\n\nconst ColumnContainerRenderer = (props: ColumnContainerRendererProps) => {\n    const {\n        layoutOptions,\n        renderColumnContainer,\n        children,\n        columnContainerProps: { style, ...restColumnContainerProps } = {},\n        ...rest\n    } = props;\n\n    const columnContainerProps = {\n        className: \"react-photo-album--column\",\n        style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            flexWrap: \"nowrap\",\n            alignItems: \"flex-start\",\n            width: cssWidth(props),\n            justifyContent: layoutOptions.layout === \"columns\" ? \"space-between\" : \"flex-start\",\n            ...style,\n        } as CSSProperties,\n        ...restColumnContainerProps,\n    };\n\n    return (renderColumnContainer ?? defaultRenderColumnContainer)({\n        layoutOptions,\n        columnContainerProps,\n        children,\n        ...rest,\n    });\n};\n\nexport default ColumnContainerRenderer;\n","import * as React from \"react\";\n\nimport computeColumnsLayout from \"../../layouts/columns\";\nimport PhotoRenderer from \"../renderers/PhotoRenderer\";\nimport ColumnContainerRenderer from \"../renderers/ColumnContainerRenderer\";\nimport {\n    ColumnsLayoutOptions,\n    ComponentsProps,\n    Instrumentation,\n    Photo,\n    RenderColumnContainer,\n    RenderPhoto,\n} from \"../../types\";\n\ntype ColumnsLayoutProps<T extends Photo = Photo> = {\n    photos: T[];\n    layoutOptions: ColumnsLayoutOptions;\n    renderPhoto?: RenderPhoto<T>;\n    renderColumnContainer?: RenderColumnContainer;\n    componentsProps?: ComponentsProps;\n    instrumentation?: Instrumentation;\n};\n\nconst ColumnsLayout = <T extends Photo = Photo>(props: ColumnsLayoutProps<T>): JSX.Element => {\n    const { photos, layoutOptions, renderPhoto, renderColumnContainer, componentsProps, instrumentation } = props;\n\n    const columnsLayout = computeColumnsLayout({ photos, layoutOptions, instrumentation });\n\n    if (columnsLayout === undefined) return <></>;\n\n    const { columnsModel, columnsRatios, columnsGaps } = columnsLayout;\n\n    return (\n        <>\n            {columnsModel.map((column, columnIndex) => (\n                <ColumnContainerRenderer\n                    key={`column-${columnIndex}`}\n                    layoutOptions={layoutOptions}\n                    columnIndex={columnIndex}\n                    columnsCount={columnsModel.length}\n                    columnsGaps={columnsGaps}\n                    columnsRatios={columnsRatios}\n                    renderColumnContainer={renderColumnContainer}\n                    columnContainerProps={componentsProps?.columnContainerProps}\n                >\n                    {column.map(({ photo, layout }) => (\n                        <PhotoRenderer\n                            key={photo.key || photo.src}\n                            photo={photo}\n                            layout={layout}\n                            layoutOptions={layoutOptions}\n                            renderPhoto={renderPhoto}\n                            imageProps={componentsProps?.imageProps}\n                        />\n                    ))}\n                </ColumnContainerRenderer>\n            ))}\n        </>\n    );\n};\n\nexport default ColumnsLayout;\n","import ratio from \"../utils/ratio\";\nimport { ColumnsLayoutOptions, Instrumentation, Photo, PhotoLayout } from \"../types\";\n\ntype ComputeMasonryLayoutProps<T extends Photo = Photo> = {\n    photos: T[];\n    layoutOptions: ColumnsLayoutOptions;\n    instrumentation?: Instrumentation;\n};\n\ntype MasonryColumnsModel<T extends Photo = Photo> = { photo: T; layout: PhotoLayout }[][] | undefined;\n\nconst computeMasonryLayout = <T extends Photo = Photo>(props: ComputeMasonryLayoutProps<T>): MasonryColumnsModel<T> => {\n    const { photos, layoutOptions, instrumentation } = props;\n    const { spacing, padding, containerWidth } = layoutOptions;\n\n    const columns = Math.min(layoutOptions.columns, photos.length);\n\n    instrumentation?.onStartLayoutComputation?.();\n\n    // calculate column width based on total width and columns count\n    const columnWidth = (containerWidth - spacing * (columns - 1) - 2 * padding * columns) / columns;\n\n    // encountered impossible layout\n    if (columnWidth <= 0) {\n        // will try to find a solution recursively with fewer columns\n        return columns > 1\n            ? computeMasonryLayout({\n                  ...props,\n                  layoutOptions: { ...layoutOptions, columns: columns - 1 },\n              })\n            : undefined;\n    }\n\n    // store current top positions for each column\n    const columnsCurrentTopPositions: number[] = [];\n    for (let i = 0; i < columns; i += 1) {\n        columnsCurrentTopPositions[i] = 0;\n    }\n\n    // group photos by column\n    const columnsModel = photos.reduce<{ photo: T; index: number }[][]>((acc, photo: T, index) => {\n        // find the shortest column\n        const shortestColumn = columnsCurrentTopPositions.reduce(\n            (acc, item, i) =>\n                // subtracting 1 here to compensate for floating point precision errors\n                // when two columns have identical height their floating point values can be slightly off\n                // in subsequent re-renders, leading to images jumping between columns\n                item < columnsCurrentTopPositions[acc] - 1 ? i : acc,\n            0\n        );\n\n        // update top position of the shortest column\n        columnsCurrentTopPositions[shortestColumn] =\n            columnsCurrentTopPositions[shortestColumn] + columnWidth / ratio(photo) + spacing + 2 * padding;\n\n        // place a photo into the shortest column\n        if (!acc[shortestColumn]) {\n            acc[shortestColumn] = [];\n        }\n        acc[shortestColumn].push({ photo, index });\n\n        return acc;\n    }, []);\n\n    // map through each column and photo and add layout properties\n    const result = columnsModel.map((column) =>\n        column.map(({ photo, index }, photoIndex) => ({\n            photo,\n            layout: {\n                width: columnWidth,\n                height: columnWidth / ratio(photo),\n                index,\n                photoIndex,\n                photosCount: column.length,\n            },\n        }))\n    );\n\n    instrumentation?.onFinishLayoutComputation?.(result);\n\n    return result;\n};\n\nexport default computeMasonryLayout;\n","import * as React from \"react\";\n\nimport computeMasonryLayout from \"../../layouts/masonry\";\nimport PhotoRenderer from \"../renderers/PhotoRenderer\";\nimport ColumnContainerRenderer from \"../renderers/ColumnContainerRenderer\";\nimport {\n    ColumnsLayoutOptions,\n    ComponentsProps,\n    Instrumentation,\n    Photo,\n    RenderColumnContainer,\n    RenderPhoto,\n} from \"../../types\";\n\ntype MasonryLayoutProps<T extends Photo = Photo> = {\n    photos: T[];\n    layoutOptions: ColumnsLayoutOptions;\n    renderPhoto?: RenderPhoto<T>;\n    renderColumnContainer?: RenderColumnContainer;\n    componentsProps?: ComponentsProps;\n    instrumentation?: Instrumentation;\n};\n\nconst MasonryLayout = <T extends Photo = Photo>(props: MasonryLayoutProps<T>): JSX.Element => {\n    const { photos, layoutOptions, renderPhoto, renderColumnContainer, componentsProps, instrumentation } = props;\n\n    const masonryLayout = computeMasonryLayout({ photos, layoutOptions, instrumentation });\n\n    if (masonryLayout === undefined) return <></>;\n\n    return (\n        <>\n            {masonryLayout.map((column, columnIndex) => (\n                <ColumnContainerRenderer\n                    key={`masonry-column-${columnIndex}`}\n                    layoutOptions={layoutOptions}\n                    columnsCount={masonryLayout.length}\n                    columnIndex={columnIndex}\n                    renderColumnContainer={renderColumnContainer}\n                    columnContainerProps={componentsProps?.columnContainerProps}\n                >\n                    {column.map(({ photo, layout }) => (\n                        <PhotoRenderer\n                            key={photo.key || photo.src}\n                            photo={photo}\n                            layout={layout}\n                            layoutOptions={layoutOptions}\n                            renderPhoto={renderPhoto}\n                            imageProps={componentsProps?.imageProps}\n                        />\n                    ))}\n                </ColumnContainerRenderer>\n            ))}\n        </>\n    );\n};\n\nexport default MasonryLayout;\n","import * as React from \"react\";\nimport { CSSProperties, ForwardRefExoticComponent, PropsWithChildren, RefAttributes } from \"react\";\n\nimport { ContainerProps, RenderContainer, RenderContainerProps } from \"../../types\";\n\nconst defaultRenderContainer = ({ containerProps, children, containerRef }: RenderContainerProps) => (\n    <div ref={containerRef} {...containerProps}>\n        {children}\n    </div>\n);\n\ntype ContainerRendererProps = Omit<RenderContainerProps, \"containerProps\"> &\n    Pick<Partial<RenderContainerProps>, \"containerProps\"> & { renderContainer?: RenderContainer };\n\nconst ContainerRenderer = (props: ContainerRendererProps) => {\n    const {\n        layoutOptions,\n        renderContainer,\n        children,\n        containerRef,\n        containerProps: { style, ...restContainerProps } = {},\n    } = props;\n    const { layout } = layoutOptions;\n\n    const containerProps = {\n        className: `react-photo-album react-photo-album--${layout}`,\n        style: {\n            display: \"flex\",\n            flexWrap: \"nowrap\",\n            justifyContent: \"space-between\",\n            flexDirection: layout === \"rows\" ? \"column\" : \"row\",\n            ...style,\n        } as CSSProperties,\n        ...restContainerProps,\n    };\n\n    // we are dealing with deprecated exotic component returned by forwardRef\n    if (renderContainer && typeof renderContainer === \"object\") {\n        const Component = renderContainer as ForwardRefExoticComponent<\n            PropsWithChildren<ContainerProps> & RefAttributes<HTMLDivElement>\n        >;\n\n        return (\n            <Component ref={containerRef} layoutOptions={layoutOptions} containerProps={containerProps}>\n                {children}\n            </Component>\n        );\n    }\n\n    return (renderContainer ?? defaultRenderContainer)({\n        containerProps,\n        containerRef,\n        layoutOptions,\n        children,\n    });\n};\n\nexport default ContainerRenderer;\n","import { useEffect, useLayoutEffect } from \"react\";\n\n/* istanbul ignore next */\nexport default typeof document !== \"undefined\" ? useLayoutEffect : useEffect;\n","import { ResponsiveParameter } from \"../types\";\n\nconst breakpoints = Object.freeze([1200, 600, 300, 0]);\n\nconst unwrap = (value: ResponsiveParameter, containerWidth: number): number =>\n    typeof value === \"function\" ? value(containerWidth) : value;\n\nconst unwrapParameter = (value: ResponsiveParameter | undefined, containerWidth: number): number | undefined =>\n    typeof value !== \"undefined\" ? unwrap(value, containerWidth) : undefined;\n\nconst selectResponsiveValue = (values: ResponsiveParameter[], containerWidth: number): number => {\n    const index = breakpoints.findIndex((breakpoint) => breakpoint <= containerWidth);\n    return unwrap(values[index >= 0 ? index : 0], containerWidth);\n};\n\nconst resolveResponsiveParameter = (\n    parameter: ResponsiveParameter | undefined,\n    containerWidth: number,\n    values: ResponsiveParameter[]\n): number => {\n    const value = unwrapParameter(parameter, containerWidth);\n    return value === undefined ? selectResponsiveValue(values, containerWidth) : value;\n};\n\nexport default resolveResponsiveParameter;\n","import * as React from \"react\";\n\nimport RowsLayout from \"./components/layouts/RowsLayout\";\nimport ColumnsLayout from \"./components/layouts/ColumnsLayout\";\nimport MasonryLayout from \"./components/layouts/MasonryLayout\";\nimport ContainerRenderer from \"./components/renderers/ContainerRenderer\";\nimport useMounted from \"./hooks/useMounted\";\nimport useContainerWidth from \"./hooks/useContainerWidth\";\nimport resolveResponsiveParameter from \"./utils/responsive\";\nimport { ColumnsLayoutOptions, ComponentsPropsParameter, Photo, PhotoAlbumProps, RowsLayoutOptions } from \"./types\";\n\nconst resolveLayoutOptions = <T extends Photo>({\n    layout,\n    onClick,\n    viewportWidth,\n    containerWidth,\n    targetRowHeight,\n    rowConstraints,\n    columns,\n    spacing,\n    padding,\n    sizes,\n}: Omit<PhotoAlbumProps<T>, \"photos\"> & {\n    viewportWidth?: number;\n    containerWidth: number;\n}): RowsLayoutOptions | ColumnsLayoutOptions => ({\n    layout,\n    onClick,\n    viewportWidth,\n    containerWidth,\n    columns: resolveResponsiveParameter(columns, containerWidth, [5, 4, 3, 2]),\n    spacing: resolveResponsiveParameter(spacing, containerWidth, [20, 15, 10, 5]),\n    padding: resolveResponsiveParameter(padding, containerWidth, [0, 0, 0, 0, 0]),\n    targetRowHeight: resolveResponsiveParameter(targetRowHeight, containerWidth, [\n        (w) => w / 5,\n        (w) => w / 4,\n        (w) => w / 3,\n        (w) => w / 2,\n    ]),\n    sizes,\n    rowConstraints,\n});\n\nconst resolveComponentsProps = (componentsProps: ComponentsPropsParameter | undefined, containerWidth: number) => {\n    return typeof componentsProps === \"function\" ? componentsProps(containerWidth) : componentsProps;\n};\n\nconst PhotoAlbum = <T extends Photo>(props: PhotoAlbumProps<T>): JSX.Element => {\n    const {\n        photos,\n        layout,\n        renderPhoto,\n        renderContainer,\n        renderRowContainer,\n        renderColumnContainer,\n        defaultContainerWidth,\n        resizeObserverProvider,\n        breakpoints,\n        instrumentation,\n    } = props;\n\n    const mounted = useMounted();\n    const { containerRef, containerWidth } = useContainerWidth(resizeObserverProvider, breakpoints);\n\n    // safeguard against incorrect usage\n    if (!layout || ![\"rows\", \"columns\", \"masonry\"].includes(layout) || !Array.isArray(photos)) return <></>;\n\n    const layoutOptions = resolveLayoutOptions({\n        containerWidth: (mounted && containerWidth) || defaultContainerWidth || 800,\n        viewportWidth: (mounted && window.innerWidth) || undefined,\n        ...props,\n    });\n\n    const componentsProps = resolveComponentsProps(props.componentsProps, layoutOptions.containerWidth);\n\n    const commonLayoutProps = { photos, renderPhoto, componentsProps, instrumentation };\n\n    return (\n        <ContainerRenderer\n            containerRef={containerRef}\n            layoutOptions={layoutOptions}\n            renderContainer={renderContainer}\n            containerProps={componentsProps?.containerProps}\n        >\n            {layout === \"rows\" ? (\n                <RowsLayout\n                    layoutOptions={layoutOptions as RowsLayoutOptions}\n                    renderRowContainer={renderRowContainer}\n                    {...commonLayoutProps}\n                />\n            ) : layout === \"columns\" ? (\n                <ColumnsLayout\n                    layoutOptions={layoutOptions as ColumnsLayoutOptions}\n                    renderColumnContainer={renderColumnContainer}\n                    {...commonLayoutProps}\n                />\n            ) : (\n                <MasonryLayout\n                    layoutOptions={layoutOptions as ColumnsLayoutOptions}\n                    renderColumnContainer={renderColumnContainer}\n                    {...commonLayoutProps}\n                />\n            )}\n        </ContainerRenderer>\n    );\n};\n\nexport default PhotoAlbum;\n","import { useState } from \"react\";\nimport useLayoutEffect from \"./useLayoutEffect\";\n\nconst useMounted = () => {\n    const [mounted, setMounted] = useState(false);\n\n    useLayoutEffect(() => {\n        setMounted(true);\n        return () => setMounted(false);\n    }, []);\n\n    return mounted;\n};\n\nexport default useMounted;\n","import { useCallback, useMemo, useRef, useState } from \"react\";\nimport { ResizeObserverProvider } from \"../types\";\n\nconst useContainerWidth = (resizeObserverProvider?: ResizeObserverProvider, breakpoints?: number[]) => {\n    const observerRef = useRef<ResizeObserver>();\n    const [containerWidth, setContainerWidth] = useState<number>();\n\n    const containerRef = useCallback(\n        (node) => {\n            if (observerRef.current) {\n                observerRef.current.disconnect();\n                observerRef.current = undefined;\n            }\n\n            const updateWidth = () => {\n                let newWidth = node?.clientWidth;\n\n                if (newWidth !== undefined && breakpoints && breakpoints.length > 0) {\n                    const sortedBreakpoints = [...breakpoints.filter((x) => x > 0)].sort((a, b) => b - a);\n                    sortedBreakpoints.push(Math.floor(sortedBreakpoints[sortedBreakpoints.length - 1] / 2));\n                    newWidth = sortedBreakpoints.find(\n                        (breakpoint, index) => breakpoint <= newWidth || index === sortedBreakpoints.length - 1\n                    );\n                }\n\n                setContainerWidth(newWidth);\n            };\n\n            updateWidth();\n\n            if (node) {\n                observerRef.current =\n                    typeof ResizeObserver !== \"undefined\"\n                        ? new ResizeObserver(updateWidth)\n                        : resizeObserverProvider?.(updateWidth);\n\n                observerRef.current?.observe(node);\n            }\n        },\n        [resizeObserverProvider, breakpoints]\n    );\n\n    return useMemo(() => ({ containerRef, containerWidth }), [containerRef, containerWidth]);\n};\n\nexport default useContainerWidth;\n"],"names":["ratio","_ref","width","height","round","value","decimals","factor","Math","pow","Number","EPSILON","MinHeap","comparator","heap","compare","n","greater","i","j","swap","temp","push","element","k","k2","swim","pop","max","sink","size","findShortestPath","graph","startNode","endNode","precedentsMap","visited","storedShortestPaths","rank","shortestNode","pQueue","el","weight","a","b","id","undefined","shortestNodeId","neighboringNodes","neighbor","newTotalWeight","buildPrecedentsMap","nodes","reverse","getPathFromPrecedentsMap","getCommonHeight","row","containerWidth","spacing","padding","rowWidth","length","reduce","acc","photo","cost","photos","targetRowHeight","slice","commonHeight","computeRowsLayout","_ref3","layoutOptions","instrumentation","rowConstraints","_a","onStartLayoutComputation","limitNodeSearch","minRatio","min","MAX_VALUE","findIdealNodeSearch","getNeighbors","_ref2","node","results","start","startOffset","minPhotos","endOffset","_b","maxPhotos","Infinity","fullGraphSearch","currentCost","toString","makeGetNeighbors","path","result","_loop","map","index","_ref4","_ref5","photoIndex","layout","photosCount","onFinishLayoutComputation","call","calcWidth","base","gaps","cssWidth","calculateSizesValue","match","defaultRenderPhoto","imageProps","src","alt","srcSet","sizes","rest","_excluded","React","createElement","_extends","PhotoRenderer","props","style","_props$imageProps","restImageProps","_objectWithoutPropertiesLoose","_excluded2","renderPhoto","onClick","imageStyle","display","boxSizing","aspectRatio","marginBottom","cursor","handleClick","event","title","className","images","concat","sort","first","second","image","join","viewport","ceil","viewportWidth","srcSetAndSizes","defaultRenderRowContainer","rowContainerProps","children","RowContainerRenderer","rowIndex","rowsCount","renderRowContainer","_props$rowContainerPr","restRowContainerProps","flexDirection","flexWrap","alignItems","justifyContent","RowsLayout","componentsProps","rowsLayout","Fragment","key","findShortestPathLengthN","pathLength","comp","reconstructShortestPath","_","queue","Object","keys","forEach","accumulatedWeight","computeShortestPath","buildColumnsModel","columnsGaps","columnsRatios","columnsModel","totalRatio","column","totalAdjustedGaps","columnWidth","computeColumnsModel","targetColumnWidth","columns","Array","from","targetColumnHeight","cutOffHeight","computeLayout","_computeColumnsModel","findIndex","columnModel","_ref5$layout","computeColumnsLayout","_ref6","defaultRenderColumnContainer","columnContainerProps","columnIndex","columnsCount","ColumnContainerRenderer","renderColumnContainer","_props$columnContaine","restColumnContainerProps","ColumnsLayout","columnsLayout","computeMasonryLayout","columnsCurrentTopPositions","shortestColumn","item","MasonryLayout","masonryLayout","defaultRenderContainer","containerProps","containerRef","ref","ContainerRenderer","renderContainer","_props$containerProps","restContainerProps","Component","useLayoutEffect","document","useEffect","breakpoints","freeze","unwrap","resolveResponsiveParameter","parameter","values","unwrapParameter","breakpoint","selectResponsiveValue","PhotoAlbum","defaultContainerWidth","resizeObserverProvider","mounted","useState","_useState","setMounted","useMounted","_useContainerWidth","observerRef","useRef","setContainerWidth","useCallback","current","disconnect","updateWidth","newWidth","clientWidth","sortedBreakpoints","filter","x","floor","find","ResizeObserver","observe","useMemo","useContainerWidth","includes","isArray","w","resolveLayoutOptions","window","innerWidth","resolveComponentsProps","commonLayoutProps"],"mappings":"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"}