"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importDefault(require("react"));
var react_photo_album_1 = __importDefault(require("react-photo-album"));
var lodash_1 = require("lodash");
var rxjs_1 = require("rxjs");
var Photo_1 = __importDefault(require("./Photo"));
var unsplash_1 = require("../datastores/unsplash");
var ui_1 = require("@sanity/ui");
var UnsplashAssetSource_styled_1 = require("./UnsplashAssetSource.styled");
var react_infinite_scroll_component_1 = __importDefault(require("react-infinite-scroll-component"));
var RESULTS_PER_PAGE = 42;
var PHOTO_SPACING = 2;
var PHOTO_PADDING = 1; // offset the 1px border width
var UnsplashAssetSource = /** @class */ (function (_super) {
    __extends(UnsplashAssetSource, _super);
    function UnsplashAssetSource() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            cursor: 0,
            query: '',
            page: 1,
            searchResults: [[]],
            isLoading: true
        };
        _this.searchSubscription = null;
        _this.searchSubject$ = new rxjs_1.BehaviorSubject('');
        _this.pageSubject$ = new rxjs_1.BehaviorSubject(1);
        _this.handleSelect = function (photo) {
            _this.setState({ isLoading: true });
            return unsplash_1.fetchDownloadUrl(photo).then(function (downloadUrl) {
                var description = photo.description || undefined;
                var asset = {
                    kind: 'url',
                    value: downloadUrl,
                    assetDocumentProps: {
                        source: {
                            name: 'unsplash',
                            id: photo.id,
                            url: photo.links.html
                        },
                        description: description,
                        creditLine: photo.user.name + " by Unsplash"
                    }
                };
                _this.props.onSelect([asset]);
            });
        };
        _this.handleClose = function () {
            _this.props.onClose();
        };
        _this.handleSearchTermChanged = function (event) {
            var query = event.currentTarget.value;
            _this.setState({ query: query, page: 1, searchResults: [[]], isLoading: true, cursor: 0 });
            _this.pageSubject$.next(1);
            _this.searchSubject$.next(query);
        };
        _this.handleScollerLoadMore = function () {
            var nextPage = _this.state.page + 1;
            _this.setState({ page: nextPage, isLoading: true });
            _this.pageSubject$.next(nextPage);
            _this.searchSubject$.next(_this.state.query);
        };
        _this.handleKeyDown = function (event) {
            var cursor = _this.state.cursor;
            if ((event.keyCode === 38 || event.keyCode === 37) && cursor > 0) {
                _this.setState(function (prevState) { return ({
                    cursor: prevState.cursor - 1
                }); });
            }
            else if ((event.keyCode === 40 || event.keyCode === 39) &&
                cursor < _this.getPhotos().length - 1) {
                _this.setState(function (prevState) { return ({
                    cursor: prevState.cursor + 1
                }); });
            }
        };
        _this.updateCursor = function (photo) {
            var index = _this.getPhotos().findIndex(function (result) { return result.id === photo.id; });
            _this.setState({ cursor: index });
        };
        _this.renderImage = function (props) {
            var photo = props.photo, layout = props.layout;
            var active = _this.getPhotos().findIndex(function (result) { return result.id === photo.data.id; }) ===
                _this.state.cursor || false;
            return (react_1.default.createElement(Photo_1.default, { onClick: _this.handleSelect.bind(photo.data), onKeyDown: _this.handleKeyDown, data: photo.data, width: layout.width, height: layout.height, active: active, onFocus: _this.updateCursor }));
        };
        return _this;
    }
    UnsplashAssetSource.prototype.componentDidMount = function () {
        var _this = this;
        this.searchSubscription = unsplash_1.search(this.searchSubject$, this.pageSubject$, RESULTS_PER_PAGE).subscribe({
            next: function (results) {
                var searchResults = __spreadArrays(_this.state.searchResults, [results]);
                _this.setState({
                    searchResults: searchResults,
                    isLoading: false
                });
            }
        });
    };
    UnsplashAssetSource.prototype.componentWillUnmount = function () {
        if (this.searchSubscription) {
            this.searchSubscription.unsubscribe();
        }
    };
    UnsplashAssetSource.prototype.getPhotos = function () {
        return lodash_1.flatten(this.state.searchResults);
    };
    UnsplashAssetSource.prototype.render = function () {
        var _this = this;
        var _a = this.state, query = _a.query, searchResults = _a.searchResults, isLoading = _a.isLoading;
        return (react_1.default.createElement(ui_1.Dialog, { id: 'unsplash-asset-source', header: 'Select image from Unsplash', onClose: this.handleClose, open: true, width: 4 },
            react_1.default.createElement(ui_1.Stack, { space: 3, padding: 4 },
                react_1.default.createElement(ui_1.Card, null,
                    react_1.default.createElement(UnsplashAssetSource_styled_1.Search, { space: 3 },
                        react_1.default.createElement(ui_1.Text, { size: 1, weight: 'semibold' }, "Search Unsplash"),
                        react_1.default.createElement(ui_1.TextInput, { label: 'Search Unsplash.com', placeholder: 'Topics or colors', value: query, onChange: this.handleSearchTermChanged }))),
                !isLoading && this.getPhotos().length === 0 && (react_1.default.createElement(ui_1.Text, { size: 1, muted: true }, "No results found")),
                react_1.default.createElement(react_infinite_scroll_component_1.default, { dataLength: this.getPhotos().length, next: this.handleScollerLoadMore, 
                    // scrollableTarget="unsplash-scroller"
                    hasMore: true, scrollThreshold: 0.99, height: '60vh', loader: react_1.default.createElement(ui_1.Flex, { align: 'center', justify: 'center', padding: 3 },
                        react_1.default.createElement(ui_1.Spinner, { muted: true })), endMessage: react_1.default.createElement(ui_1.Text, { size: 1, muted: true }, "No more results") }, searchResults.filter(function (photos) { return photos.length > 0; }).map(function (photos, index) {
                    return (react_1.default.createElement(react_photo_album_1.default, { key: "gallery-" + (query || 'popular') + "-" + index, layout: 'rows', spacing: PHOTO_SPACING, padding: PHOTO_PADDING, targetRowHeight: function (width) { return width < 300 ? 150 : width < 600 ? 200 : 300; }, photos: photos.map(function (photo) { return ({
                            src: photo.urls.small,
                            width: photo.width,
                            height: photo.height,
                            key: photo.id,
                            data: photo
                        }); }), renderPhoto: _this.renderImage, componentsProps: { containerProps: { style: { marginBottom: PHOTO_SPACING + "px" } } } }));
                })))));
    };
    UnsplashAssetSource.defaultProps = {
        selectedAssets: undefined
    };
    return UnsplashAssetSource;
}(react_1.default.Component));
exports.default = UnsplashAssetSource;
//# sourceMappingURL=UnsplashAssetSource.js.map