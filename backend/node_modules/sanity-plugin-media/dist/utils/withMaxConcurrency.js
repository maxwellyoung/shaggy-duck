"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.withMaxConcurrency = exports.createThrottler = void 0;
// Takes a observable-returning function and returns a new function that limits on the number of
// concurrent observables.
var operators_1 = require("rxjs/operators");
var rxjs_1 = require("rxjs");
var DEFAULT_CONCURRENCY = 4;
function remove(array, item) {
    var index = array.indexOf(item);
    if (index > -1) {
        array.splice(index, 1);
    }
    return array;
}
var createThrottler = function (concurrency) {
    if (concurrency === void 0) { concurrency = DEFAULT_CONCURRENCY; }
    var currentSubscriptions = [];
    var pendingObservables = [];
    var ready$ = new rxjs_1.Subject();
    function request(observable) {
        return new rxjs_1.Observable(function (observer) {
            if (currentSubscriptions.length >= concurrency) {
                return scheduleAndWait$(observable)
                    .pipe(operators_1.mergeMap(request)) //
                    .subscribe(observer);
            }
            var subscription = observable.subscribe(observer);
            currentSubscriptions.push(subscription);
            return function () {
                remove(currentSubscriptions, subscription);
                remove(pendingObservables, observable);
                subscription.unsubscribe();
                while (pendingObservables.length > 0 && currentSubscriptions.length < concurrency) {
                    ready$.next(pendingObservables.shift());
                }
            };
        });
    }
    function scheduleAndWait$(observable) {
        pendingObservables.push(observable);
        return ready$.asObservable().pipe(operators_1.first(function (obs) { return obs === observable; }));
    }
    return request;
};
exports.createThrottler = createThrottler;
var withMaxConcurrency = function (func, concurrency) {
    if (concurrency === void 0) { concurrency = DEFAULT_CONCURRENCY; }
    var throttler = exports.createThrottler(concurrency);
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return rxjs_1.from(throttler(func.apply(void 0, __spread(args))));
    };
};
exports.withMaxConcurrency = withMaxConcurrency;
//# sourceMappingURL=withMaxConcurrency.js.map