"use strict";
// Sourced from:
// https://github.com/sanity-io/sanity/blob/ccb777e115a8cdf20d81a9a2bc9d8c228568faff/packages/%40sanity/form-builder/src/sanity/inputs/client-adapters/assets.ts
Object.defineProperty(exports, "__esModule", { value: true });
exports.uploadAsset$ = exports.hashFile$ = void 0;
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var client_1 = require("../client");
var withMaxConcurrency_1 = require("./withMaxConcurrency");
var fetchExisting$ = function (type, hash) {
    return client_1.client.observable.fetch('*[_type == $documentType && sha1hash == $hash][0]', {
        documentType: type,
        hash: hash
    });
};
var readFile$ = function (file) {
    return new rxjs_1.Observable(function (subscriber) {
        var reader = new FileReader();
        reader.onload = function () {
            subscriber.next(reader.result);
            subscriber.complete();
        };
        reader.onerror = function (err) {
            subscriber.error(err);
        };
        reader.readAsArrayBuffer(file);
        return function () {
            reader.abort();
        };
    });
};
var hexFromBuffer = function (buffer) {
    return Array.prototype.map
        .call(new Uint8Array(buffer), function (x) { return ("00" + x.toString(16)).slice(-2); })
        .join('');
};
var hashFile$ = function (file) {
    if (!window.crypto || !window.crypto.subtle || !window.FileReader) {
        return rxjs_1.of(null);
    }
    return readFile$(file).pipe(operators_1.mergeMap(function (arrayBuffer) { return window.crypto.subtle.digest('SHA-1', arrayBuffer); }), operators_1.map(hexFromBuffer));
};
exports.hashFile$ = hashFile$;
var uploadSanityAsset$ = function (assetType, file, hash) {
    return rxjs_1.of(null).pipe(
    // NOTE: the sanity api will still dedupe unique files, but this saves us from uploading the asset file entirely
    operators_1.mergeMap(function () { return fetchExisting$("sanity." + assetType + "Asset", hash); }), 
    // Cancel if the asset already exists
    operators_1.mergeMap(function (existingAsset) {
        if (existingAsset) {
            return rxjs_1.throwError({
                message: 'Asset already exists',
                statusCode: 409
            });
        }
        return rxjs_1.of(null);
    }), operators_1.mergeMap(function () {
        // Begin upload if no existing asset found
        return client_1.client.observable.assets
            .upload(assetType, file, {
            extract: ['blurhash', 'exif', 'location', 'lqip', 'palette'],
            preserveFilename: true
        })
            .pipe(operators_1.map(function (event) {
            return event.type === 'response'
                ? {
                    // rewrite to a 'complete' event
                    asset: event.body.document,
                    id: event.body.document._id,
                    type: 'complete'
                }
                : event;
        }));
    }));
};
exports.uploadAsset$ = withMaxConcurrency_1.withMaxConcurrency(uploadSanityAsset$);
//# sourceMappingURL=uploadSanityAsset.js.map