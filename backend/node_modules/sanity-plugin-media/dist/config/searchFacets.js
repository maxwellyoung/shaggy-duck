"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.operators = exports.inputs = exports.divider = void 0;
var groq_1 = __importDefault(require("groq"));
exports.divider = { type: 'divider' };
exports.inputs = {
    altText: {
        assetTypes: ['file', 'image'],
        field: 'altText',
        name: 'altText',
        operatorType: 'empty',
        operatorTypes: ['empty', 'notEmpty', null, 'includes', 'doesNotInclude'],
        title: 'Alt text',
        type: 'string',
        value: ''
    },
    description: {
        assetTypes: ['file', 'image'],
        field: 'description',
        name: 'description',
        operatorType: 'empty',
        operatorTypes: ['empty', 'notEmpty', null, 'includes', 'doesNotInclude'],
        title: 'Description',
        type: 'string',
        value: ''
    },
    fileName: {
        assetTypes: ['file', 'image'],
        field: 'originalFilename',
        name: 'filename',
        operatorType: 'includes',
        operatorTypes: ['includes', 'doesNotInclude'],
        title: 'File name',
        type: 'string',
        value: ''
    },
    height: {
        assetTypes: ['image'],
        field: 'metadata.dimensions.height',
        name: 'height',
        operatorType: 'greaterThan',
        operatorTypes: [
            'greaterThan',
            'greaterThanOrEqualTo',
            'lessThan',
            'lessThanOrEqualTo',
            null,
            'equalTo'
        ],
        title: 'Height',
        type: 'number',
        value: 400
    },
    inCurrentDocument: {
        assetTypes: ['file', 'image'],
        name: 'inCurrentDocument',
        operatorType: 'is',
        options: [
            {
                name: 'true',
                title: 'True',
                value: groq_1.default(templateObject_1 || (templateObject_1 = __makeTemplateObject(["_id in $documentAssetIds"], ["_id in $documentAssetIds"])))
            },
            {
                name: 'false',
                title: 'False',
                value: groq_1.default(templateObject_2 || (templateObject_2 = __makeTemplateObject(["!(_id in $documentAssetIds)"], ["!(_id in $documentAssetIds)"])))
            }
        ],
        selectOnly: true,
        title: 'In use in current document',
        type: 'select',
        value: 'true'
    },
    inUse: {
        assetTypes: ['file', 'image'],
        name: 'inUse',
        operatorType: 'is',
        options: [
            {
                name: 'true',
                title: 'True',
                value: groq_1.default(templateObject_3 || (templateObject_3 = __makeTemplateObject(["count(*[references(^._id)]) > 0"], ["count(*[references(^._id)]) > 0"])))
            },
            {
                name: 'false',
                title: 'False',
                value: groq_1.default(templateObject_4 || (templateObject_4 = __makeTemplateObject(["count(*[references(^._id)]) == 0"], ["count(*[references(^._id)]) == 0"])))
            }
        ],
        title: 'In use',
        type: 'select',
        value: 'true'
    },
    isOpaque: {
        assetTypes: ['image'],
        field: 'metadata.isOpaque',
        name: 'isOpaque',
        operatorType: 'equalTo',
        options: [
            {
                name: 'true',
                title: 'True',
                value: "false"
            },
            {
                name: 'false',
                title: 'False',
                value: "true"
            }
        ],
        title: 'Has transparency',
        type: 'select',
        value: 'true'
    },
    orientation: {
        assetTypes: ['image'],
        name: 'orientation',
        operatorType: 'is',
        operatorTypes: ['is', 'isNot'],
        options: [
            {
                name: 'portrait',
                title: 'Portrait',
                value: 'metadata.dimensions.aspectRatio < 1'
            },
            {
                name: 'landscape',
                title: 'Landscape',
                value: 'metadata.dimensions.aspectRatio > 1'
            },
            {
                name: 'square',
                title: 'Square',
                value: 'metadata.dimensions.aspectRatio == 1'
            }
        ],
        title: 'Orientation',
        type: 'select',
        value: 'portrait'
    },
    size: {
        assetTypes: ['file', 'image'],
        field: 'size',
        modifier: 'kb',
        modifiers: [
            {
                name: 'kb',
                title: 'KB',
                fieldModifier: function (fieldName) { return "round(" + fieldName + " / 1000)"; }
            },
            {
                name: 'mb',
                title: 'MB',
                fieldModifier: function (fieldName) { return "round(" + fieldName + " / 1000000)"; }
            }
        ],
        name: 'size',
        operatorType: 'greaterThan',
        operatorTypes: [
            'greaterThan',
            'greaterThanOrEqualTo',
            'lessThan',
            'lessThanOrEqualTo',
            null,
            'equalTo'
        ],
        title: 'File size',
        type: 'number',
        value: 0
    },
    tag: {
        assetTypes: ['file', 'image'],
        field: 'opt.media.tags',
        name: 'tag',
        operatorType: 'references',
        operatorTypes: ['references', 'doesNotReference', null, 'empty', 'notEmpty'],
        title: 'Tags',
        type: 'searchable'
    },
    title: {
        assetTypes: ['file', 'image'],
        field: 'title',
        name: 'title',
        operatorType: 'empty',
        operatorTypes: ['empty', 'notEmpty', null, 'includes', 'doesNotInclude'],
        title: 'Title',
        type: 'string',
        value: ''
    },
    type: {
        assetTypes: ['file', 'image'],
        name: 'type',
        operatorType: 'is',
        operatorTypes: ['is', 'isNot'],
        options: [
            {
                name: 'image',
                title: 'Image',
                value: 'mimeType match "image*"'
            },
            {
                name: 'video',
                title: 'Video',
                value: 'mimeType match "video*"'
            },
            {
                name: 'audio',
                title: 'Audio',
                value: 'mimeType match "audio*"'
            },
            {
                name: 'pdf',
                title: 'PDF',
                value: 'mimeType == "application/pdf"'
            }
        ],
        title: 'File type',
        type: 'select',
        value: 'image'
    },
    width: {
        assetTypes: ['image'],
        field: 'metadata.dimensions.width',
        name: 'width',
        operatorType: 'greaterThan',
        operatorTypes: [
            'greaterThan',
            'greaterThanOrEqualTo',
            'lessThan',
            'lessThanOrEqualTo',
            null,
            'equalTo'
        ],
        title: 'Width',
        type: 'number',
        value: 400
    }
};
exports.operators = {
    doesNotInclude: {
        fn: function (value, field) { return (value ? "!(" + field + " match '*" + value + "*')" : undefined); },
        label: 'does not include'
    },
    doesNotReference: {
        fn: function (value, _field) { return (value ? "!references('" + value + "')" : undefined); },
        label: 'does not include'
    },
    empty: {
        fn: function (_value, field) { return "!defined(" + field + ")"; },
        hideInput: true,
        label: 'is empty'
    },
    equalTo: {
        fn: function (value, field) { return (value ? field + " == " + value : undefined); },
        label: 'is equal to'
    },
    greaterThan: {
        fn: function (value, field) { return (value ? field + " > " + value : undefined); },
        label: 'is greater than'
    },
    greaterThanOrEqualTo: {
        fn: function (value, field) { return (value ? field + " >= " + value : undefined); },
        label: 'is greater than or equal to'
    },
    includes: {
        fn: function (value, field) { return (value ? field + " match '*" + value + "*'" : undefined); },
        label: 'includes'
    },
    is: {
        fn: function (value, _field) { return "" + value; },
        label: 'is'
    },
    isNot: {
        fn: function (value, _field) { return "!(" + value + ")"; },
        label: 'is not'
    },
    lessThan: {
        fn: function (value, field) { return (value ? field + " < " + value : undefined); },
        label: 'is less than'
    },
    lessThanOrEqualTo: {
        fn: function (value, field) { return (value ? field + " <= " + value : undefined); },
        label: 'is less than or equal to'
    },
    notEmpty: {
        fn: function (_value, field) { return "defined(" + field + ")"; },
        hideInput: true,
        label: 'is not empty'
    },
    references: {
        fn: function (value, _field) { return (value ? "references('" + value + "')" : undefined); },
        label: 'includes'
    }
};
var templateObject_1, templateObject_2, templateObject_3, templateObject_4;
//# sourceMappingURL=searchFacets.js.map