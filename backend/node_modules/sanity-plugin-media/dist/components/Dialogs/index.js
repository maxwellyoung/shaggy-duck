"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importDefault(require("react"));
var useTypedSelector_1 = __importDefault(require("../../hooks/useTypedSelector"));
var DialogAssetEdit_1 = __importDefault(require("../DialogAssetEdit"));
var DialogConfirm_1 = __importDefault(require("../DialogConfirm"));
var DialogSearchFacets_1 = __importDefault(require("../DialogSearchFacets"));
var DialogTagCreate_1 = __importDefault(require("../DialogTagCreate"));
var DialogTagEdit_1 = __importDefault(require("../DialogTagEdit"));
var DialogTags_1 = __importDefault(require("../DialogTags"));
var Dialogs = function () {
    // Redux
    var currentDialogs = useTypedSelector_1.default(function (state) { return state.dialog.items; });
    var renderDialogs = function (dialogs, index) {
        if (dialogs.length === 0 || index >= dialogs.length) {
            return null;
        }
        var dialog = dialogs[index];
        var childDialogs = renderDialogs(dialogs, index + 1);
        if (dialog.type === 'assetEdit') {
            return (react_1.default.createElement(DialogAssetEdit_1.default, { dialog: dialog, key: index }, childDialogs));
        }
        if (dialog.type === 'confirm') {
            return (react_1.default.createElement(DialogConfirm_1.default, { dialog: dialog, key: index }, childDialogs));
        }
        if (dialog.type === 'searchFacets') {
            return (react_1.default.createElement(DialogSearchFacets_1.default, { dialog: dialog, key: index }, childDialogs));
        }
        if (dialog.type === 'tagCreate') {
            return (react_1.default.createElement(DialogTagCreate_1.default, { dialog: dialog, key: index }, childDialogs));
        }
        if (dialog.type === 'tagEdit') {
            return (react_1.default.createElement(DialogTagEdit_1.default, { dialog: dialog, key: index }, childDialogs));
        }
        if (dialog.type === 'tags') {
            return (react_1.default.createElement(DialogTags_1.default, { dialog: dialog, key: index }, childDialogs));
        }
        return null;
    };
    return renderDialogs(currentDialogs, 0);
};
exports.default = Dialogs;
//# sourceMappingURL=index.js.map