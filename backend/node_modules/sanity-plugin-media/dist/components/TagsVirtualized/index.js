"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var ui_1 = require("@sanity/ui");
var react_1 = __importStar(require("react"));
var react_virtuoso_1 = require("react-virtuoso");
var constants_1 = require("../../constants");
var useTypedSelector_1 = __importDefault(require("../../hooks/useTypedSelector"));
var assets_1 = require("../../modules/assets");
var tags_1 = require("../../modules/tags");
var Tag_1 = __importDefault(require("../Tag"));
var VirtualRow = react_1.memo(function (_a) {
    var _b;
    var isScrolling = _a.isScrolling, item = _a.item;
    // Render label
    if (typeof item === 'string') {
        return (react_1.default.createElement(ui_1.Flex, { align: "center", justify: "space-between", key: item, paddingX: 3, style: { height: constants_1.PANEL_HEIGHT + "px" } },
            react_1.default.createElement(ui_1.Label, { size: 0 }, item)));
    }
    // Render tag - only display actions if we're not in the process of scrolling
    return react_1.default.createElement(Tag_1.default, { actions: isScrolling ? undefined : item.actions, key: (_b = item.tag) === null || _b === void 0 ? void 0 : _b._id, tag: item });
});
var TagsVirtualized = function () {
    var assetsPicked = useTypedSelector_1.default(assets_1.selectAssetsPicked);
    var tags = useTypedSelector_1.default(tags_1.selectTags);
    // State
    var _a = __read(react_1.useState(false), 2), isScrolling = _a[0], setIsScrolling = _a[1];
    // TODO: refactor, there's most certainly a more performant way to do this
    // Filter out all tag IDS used (across all) and dedupe
    var pickedTagIds = assetsPicked === null || assetsPicked === void 0 ? void 0 : assetsPicked.reduce(function (acc, val) {
        var _a, _b, _c, _d;
        var assetTagIds = ((_d = (_c = (_b = (_a = val === null || val === void 0 ? void 0 : val.asset) === null || _a === void 0 ? void 0 : _a.opt) === null || _b === void 0 ? void 0 : _b.media) === null || _c === void 0 ? void 0 : _c.tags) === null || _d === void 0 ? void 0 : _d.map(function (tag) { return tag._ref; })) || [];
        acc = acc.concat(assetTagIds);
        return acc;
    }, []);
    var pickedTagIdsUnique = __spread(new Set(pickedTagIds));
    // Segment tags into two buckets:
    // 1. those which exist in all picked assets ('applied to all')
    // 2. those which exist in some picked assets ('applied to some')
    var tagIdsSegmented = pickedTagIdsUnique.reduce(function (acc, tagId) {
        var tagIsInEveryAsset = assetsPicked.every(function (assetItem) {
            var _a, _b, _c, _d;
            var tagIndex = (_d = (_c = (_b = (_a = assetItem.asset.opt) === null || _a === void 0 ? void 0 : _a.media) === null || _b === void 0 ? void 0 : _b.tags) === null || _c === void 0 ? void 0 : _c.findIndex(function (tag) { return tag._ref === tagId; })) !== null && _d !== void 0 ? _d : -1;
            return tagIndex >= 0;
        });
        if (tagIsInEveryAsset) {
            acc.appliedToAll.push(tagId);
        }
        else {
            acc.appliedToSome.push(tagId);
        }
        return acc;
    }, {
        appliedToAll: [],
        appliedToSome: []
    });
    var tagsAppliedToAll = tags
        .filter(function (tag) { return tagIdsSegmented.appliedToAll.includes(tag.tag._id); })
        .map(function (tagItem) { return (__assign(__assign({}, tagItem), { actions: ['delete', 'edit', 'removeAll', 'search'] })); });
    var tagsAppliedToSome = tags
        .filter(function (tag) { return tagIdsSegmented.appliedToSome.includes(tag.tag._id); })
        .map(function (tagItem) { return (__assign(__assign({}, tagItem), { actions: ['applyAll', 'delete', 'edit', 'removeAll', 'search'] })); });
    var tagsUnused = tags
        .filter(function (tag) { return !pickedTagIdsUnique.includes(tag.tag._id); })
        .map(function (tagItem) { return (__assign(__assign({}, tagItem), { actions: ['applyAll', 'delete', 'edit', 'search'] })); });
    var items = [];
    if (assetsPicked.length === 0) {
        items = tags.map(function (tagItem) { return (__assign(__assign({}, tagItem), { actions: ['delete', 'edit', 'search'] })); });
    }
    else {
        if ((tagsAppliedToAll === null || tagsAppliedToAll === void 0 ? void 0 : tagsAppliedToAll.length) > 0) {
            items = __spread(items, [
                assetsPicked.length === 1 ? 'Used' : 'Used by all'
            ], tagsAppliedToAll);
        }
        if ((tagsAppliedToSome === null || tagsAppliedToSome === void 0 ? void 0 : tagsAppliedToSome.length) > 0) {
            items = __spread(items, [
                'Used by some'
            ], tagsAppliedToSome);
        }
        if ((tagsUnused === null || tagsUnused === void 0 ? void 0 : tagsUnused.length) > 0) {
            items = __spread(items, [
                'Unused'
            ], tagsUnused);
        }
    }
    return (react_1.default.createElement(react_virtuoso_1.Virtuoso, { className: "media__custom-scrollbar", computeItemKey: function (index) {
            var item = items[index];
            if (typeof item === 'string') {
                return item;
            }
            return item.tag._id;
        }, isScrolling: setIsScrolling, itemContent: function (index) {
            return react_1.default.createElement(VirtualRow, { isScrolling: isScrolling, item: items[index] });
        }, style: { flex: 1, overflowX: 'hidden' }, totalCount: items.length }));
};
exports.default = TagsVirtualized;
//# sourceMappingURL=index.js.map