"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var ui_1 = require("@sanity/ui");
var router_1 = require("part:@sanity/base/router");
var preview_1 = __importDefault(require("part:@sanity/base/preview"));
var schema_1 = __importDefault(require("part:@sanity/base/schema"));
var with_referring_documents_1 = require("part:@sanity/base/with-referring-documents");
var react_1 = __importDefault(require("react"));
var styled_components_1 = __importDefault(require("styled-components"));
// Brute force styles on all of Sanity's preview components.
// TODO: Consider using a custom preview component that is able to resolve custom titles
// (and potentially subtitles) defined at the document schema level. Or anything to ensure
// that future upstream changes to Sanity's preview components don't break anything here.
var Container = styled_components_1.default(ui_1.Box)(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  * {\n    color: ", ";\n  }\n\n  a {\n    text-decoration: none;\n  }\n\n  h2 {\n    font-size: ", ";\n  }\n"], ["\n  * {\n    color: ", ";\n  }\n\n  a {\n    text-decoration: none;\n  }\n\n  h2 {\n    font-size: ", ";\n  }\n"])), function (props) { return props.theme.sanity.color.base.fg; }, function (props) { return props.theme.sanity.fonts.text.sizes[1]; });
var DocumentList = function (props) {
    var assetId = props.assetId;
    var renderChild = function (renderProps) {
        var isLoading = renderProps.isLoading, referringDocuments = renderProps.referringDocuments;
        var draftIds = referringDocuments.reduce(function (acc, doc) {
            return doc._id.startsWith('drafts.') ? acc.concat(doc._id.slice(7)) : acc;
        }, []);
        var filteredDocuments = referringDocuments.filter(function (doc) { return !draftIds.includes(doc._id); });
        if (isLoading) {
            return react_1.default.createElement(ui_1.Text, { size: 1 }, "Loading...");
        }
        if (filteredDocuments.length === 0) {
            return react_1.default.createElement(ui_1.Text, { size: 1 }, "No documents are referencing this asset");
        }
        return filteredDocuments === null || filteredDocuments === void 0 ? void 0 : filteredDocuments.map(function (doc) {
            var schemaType = schema_1.default.get(doc._type);
            return (react_1.default.createElement(ui_1.Card, { key: doc._id, marginBottom: 2, padding: 2, radius: 2, shadow: 1, style: { overflow: 'hidden' } },
                react_1.default.createElement(ui_1.Box, null, schemaType ? (react_1.default.createElement(router_1.IntentLink, { intent: "edit", params: { id: doc._id }, key: doc._id },
                    react_1.default.createElement(preview_1.default, { layout: "default", value: doc, type: schemaType }))) : (react_1.default.createElement(ui_1.Box, { padding: 2 },
                    react_1.default.createElement(ui_1.Text, { size: 1 },
                        "A document of the unknown type ",
                        react_1.default.createElement("em", null, doc._type)))))));
        });
    };
    return (react_1.default.createElement(Container, null,
        react_1.default.createElement(with_referring_documents_1.WithReferringDocuments, { id: assetId }, renderChild)));
};
exports.default = DocumentList;
var templateObject_1;
//# sourceMappingURL=index.js.map