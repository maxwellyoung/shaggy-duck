"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var icons_1 = require("@sanity/icons");
var ui_1 = require("@sanity/ui");
var copy_to_clipboard_1 = __importDefault(require("copy-to-clipboard"));
var react_1 = __importStar(require("react"));
var ButtonAssetCopy = function (props) {
    var disabled = props.disabled, url = props.url;
    // Refs
    var refPopoverTimeout = react_1.useRef();
    // State
    var _a = __read(react_1.useState(false), 2), popoverVisible = _a[0], setPopoverVisible = _a[1];
    // Callbacks
    var handleClick = function () {
        if (refPopoverTimeout.current) {
            clearTimeout(refPopoverTimeout.current);
        }
        setPopoverVisible(true);
        copy_to_clipboard_1.default(url);
        refPopoverTimeout.current = setTimeout(function () {
            setPopoverVisible(false);
        }, 1250);
    };
    // Effects
    react_1.useEffect(function () {
        return function () {
            if (refPopoverTimeout.current) {
                clearTimeout(refPopoverTimeout.current);
            }
        };
    }, []);
    return (react_1.default.createElement(ui_1.Popover, { content: react_1.default.createElement(ui_1.Text, { muted: true, size: 1 }, "Copied!"), open: popoverVisible, padding: 2, placement: "top", radius: 1 },
        react_1.default.createElement(ui_1.Button, { disabled: disabled, fontSize: 1, icon: icons_1.ClipboardIcon, mode: "ghost", onClick: handleClick, text: "Copy URL" })));
};
exports.default = ButtonAssetCopy;
//# sourceMappingURL=index.js.map