"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var icons_1 = require("@sanity/icons");
var ui_1 = require("@sanity/ui");
var react_1 = __importDefault(require("react"));
var react_redux_1 = require("react-redux");
var searchFacets_1 = require("../../config/searchFacets");
var search_1 = require("../../modules/search");
var SearchFacet_1 = __importDefault(require("../SearchFacet"));
var SearchFacetString = function (props) {
    var facet = props.facet;
    // Redux
    var dispatch = react_redux_1.useDispatch();
    var handleOperatorItemClick = function (operatorType) {
        dispatch(search_1.searchActions.facetsUpdate({ name: facet.name, operatorType: operatorType }));
    };
    var handleChange = function (e) {
        dispatch(search_1.searchActions.facetsUpdate({ name: facet.name, value: e.target.value }));
    };
    var selectedOperatorType = facet.operatorType;
    return (react_1.default.createElement(SearchFacet_1.default, { facet: facet },
        (facet === null || facet === void 0 ? void 0 : facet.operatorTypes) && (react_1.default.createElement(ui_1.MenuButton, { button: react_1.default.createElement(ui_1.Button, { fontSize: 1, iconRight: icons_1.SelectIcon, padding: 2, text: searchFacets_1.operators[selectedOperatorType].label }), id: "operators", menu: react_1.default.createElement(ui_1.Menu, null, facet.operatorTypes.map(function (operatorType, index) {
                if (operatorType) {
                    return (react_1.default.createElement(ui_1.MenuItem, { disabled: operatorType === selectedOperatorType, fontSize: 1, key: operatorType, onClick: function () { return handleOperatorItemClick(operatorType); }, padding: 2, text: searchFacets_1.operators[operatorType].label }));
                }
                return react_1.default.createElement(ui_1.MenuDivider, { key: index });
            })) })),
        !searchFacets_1.operators[selectedOperatorType].hideInput && (react_1.default.createElement(ui_1.Box, { marginLeft: 1, style: { maxWidth: '125px' } },
            react_1.default.createElement(ui_1.TextInput, { fontSize: 1, onChange: handleChange, padding: 2, radius: 2, width: 2, value: facet === null || facet === void 0 ? void 0 : facet.value })))));
};
exports.default = SearchFacetString;
//# sourceMappingURL=index.js.map