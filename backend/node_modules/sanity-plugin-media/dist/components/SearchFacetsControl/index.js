"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var icons_1 = require("@sanity/icons");
var ui_1 = require("@sanity/ui");
var react_1 = __importDefault(require("react"));
var react_redux_1 = require("react-redux");
var constants_1 = require("../../constants");
var useTypedSelector_1 = __importDefault(require("../../hooks/useTypedSelector"));
var search_1 = require("../../modules/search");
var SearchFacetsControl = function () {
    // Redux
    var dispatch = react_redux_1.useDispatch();
    var assetTypes = useTypedSelector_1.default(function (state) { return state.assets.assetTypes; });
    var searchFacets = useTypedSelector_1.default(function (state) { return state.search.facets; });
    var selectedDocument = useTypedSelector_1.default(function (state) { return state.selected.document; });
    var isTool = !selectedDocument;
    var filteredFacets = constants_1.FACETS
        // Filter facets based on current context, whether it's invoked as a tool, or via selection through via custom asset source.
        .filter(function (facet) {
        if (facet.type === 'group' || facet.type === 'divider') {
            return true;
        }
        if (isTool) {
            return !(facet === null || facet === void 0 ? void 0 : facet.selectOnly);
        }
        var matchingAssetTypes = facet.assetTypes.filter(function (assetType) {
            return assetTypes.includes(assetType);
        });
        return matchingAssetTypes.length > 0;
    })
        // Remove adjacent and leading / trailing dividers
        .filter(function (facet, index, facets) {
        var previousFacet = facets[index - 1];
        // Ignore leading + trailing dividers
        if ((facet.type === 'divider' && index === 0) || index === facets.length - 1) {
            return false;
        }
        // Ignore adjacent dividers
        if (facet.type === 'divider' && (previousFacet === null || previousFacet === void 0 ? void 0 : previousFacet.type) === 'divider') {
            return false;
        }
        return true;
    });
    // Determine if there are any remaining un-selected facets
    // (This operates under the assumption that only one of each facet can be active at any given time)
    var hasRemainingSearchFacets = filteredFacets.filter(function (facet) { return facet; }).length - searchFacets.length > 0;
    var renderMenuFacets = function (facets) {
        return (react_1.default.createElement(react_1.default.Fragment, null, facets === null || facets === void 0 ? void 0 : facets.map(function (facet, index) {
            if (facet.type === 'divider') {
                return react_1.default.createElement(ui_1.MenuDivider, { key: index });
            }
            // Recursively render menu facets
            if (facet.type === 'group') {
                return (react_1.default.createElement(ui_1.MenuGroup, { text: facet.title, title: facet.title }, renderMenuFacets(facet.facets)));
            }
            if (facet) {
                var isPresent = !!searchFacets.find(function (v) { return v.name === facet.name; });
                return (react_1.default.createElement(ui_1.MenuItem, { disabled: isPresent, fontSize: 1, key: facet.name, onClick: function () { return dispatch(search_1.searchActions.facetsAdd({ facet: facet })); }, padding: 2, text: facet.title }));
            }
            return null;
        })));
    };
    return (react_1.default.createElement(ui_1.Flex, null,
        react_1.default.createElement(ui_1.MenuButton, { button: react_1.default.createElement(ui_1.Button, { disabled: !hasRemainingSearchFacets, fontSize: 1, icon: icons_1.AddCircleIcon, mode: "bleed", text: "Add filter", tone: "primary" }), id: "facets", menu: react_1.default.createElement(ui_1.Menu, null, renderMenuFacets(filteredFacets)), placement: "right-start", portal: true }),
        searchFacets.length > 0 && (react_1.default.createElement(ui_1.Button, { fontSize: 1, mode: "bleed", onClick: function () { return dispatch(search_1.searchActions.facetsClear()); }, text: "Clear" }))));
};
exports.default = SearchFacetsControl;
//# sourceMappingURL=index.js.map