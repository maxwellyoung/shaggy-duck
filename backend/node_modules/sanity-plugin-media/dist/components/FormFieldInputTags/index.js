"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var ui_1 = require("@sanity/ui");
var react_1 = __importDefault(require("react"));
var react_hook_form_1 = require("react-hook-form");
var creatable_1 = __importDefault(require("react-select/creatable"));
var useTypedSelector_1 = __importDefault(require("../../hooks/useTypedSelector"));
var creatable_2 = require("../../styled/react-select/creatable");
var FormFieldInputLabel_1 = __importDefault(require("../FormFieldInputLabel"));
var FormFieldInputTags = function (props) {
    var control = props.control, description = props.description, disabled = props.disabled, error = props.error, label = props.label, name = props.name, onCreateTag = props.onCreateTag, options = props.options, placeholder = props.placeholder, value = props.value;
    // Redux
    var creating = useTypedSelector_1.default(function (state) { return state.tags.creating; });
    var tagsFetching = useTypedSelector_1.default(function (state) { return state.tags.fetching; });
    return (react_1.default.createElement(ui_1.Box
    // HACK: force stacking context to ensure react-select dropdown sits above other fields
    , { 
        // HACK: force stacking context to ensure react-select dropdown sits above other fields
        style: { zIndex: 2 } },
        react_1.default.createElement(FormFieldInputLabel_1.default, { description: description, error: error, label: label, name: name }),
        react_1.default.createElement(react_hook_form_1.Controller, { control: control, defaultValue: value, name: name, render: function (_a) {
                var onBlur = _a.onBlur, onChange = _a.onChange, controllerValue = _a.value;
                // TODO: investigate overriding `onChange` and updating form state manually.
                // `opt.media.tags` is initialised with `null` as a defaultValue in react-hook-form
                // Ideally, we'd be able to set `opt.media.tags` as null when all items are cleared, rather than
                // setting it to an empty array (which is currently causing false positives in denoting whether the form is dirty)
                //
                // To illustrate this issue:
                // - Edit an asset with no tags
                // - Add a new tag (either an existing one, or create one inline)
                // - Remove the tag you've just created
                //
                // At this point, the form will still be marked as dirty when it shouldnt be
                return (react_1.default.createElement(creatable_1.default, { cacheOptions: false, components: creatable_2.reactSelectComponents, defaultOptions: true, instanceId: "tags", isClearable: false, isDisabled: creating || disabled || tagsFetching, isLoading: creating, isMulti: true, name: name, noOptionsMessage: function () { return 'No tags'; }, onBlur: onBlur, onChange: onChange, onCreateOption: onCreateTag, options: options, placeholder: tagsFetching ? 'Loading...' : placeholder, styles: creatable_2.reactSelectStyles, value: controllerValue }));
            } })));
};
exports.default = FormFieldInputTags;
//# sourceMappingURL=index.js.map