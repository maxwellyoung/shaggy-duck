"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
var color_1 = require("@sanity/color");
var icons_1 = require("@sanity/icons");
var ui_1 = require("@sanity/ui");
var formatRelative_1 = __importDefault(require("date-fns/formatRelative"));
var filesize_1 = __importDefault(require("filesize"));
var react_1 = __importStar(require("react"));
var react_redux_1 = require("react-redux");
var styled_components_1 = __importStar(require("styled-components"));
var theme_ui_1 = require("theme-ui");
var AssetSourceDispatchContext_1 = require("../../contexts/AssetSourceDispatchContext");
var useKeyPress_1 = __importDefault(require("../../hooks/useKeyPress"));
var useTypedSelector_1 = __importDefault(require("../../hooks/useTypedSelector"));
var assets_1 = require("../../modules/assets");
var dialog_1 = require("../../modules/dialog");
var getAssetResolution_1 = __importDefault(require("../../utils/getAssetResolution"));
var imageDprUrl_1 = __importDefault(require("../../utils/imageDprUrl"));
var typeGuards_1 = require("../../utils/typeGuards");
var FileIcon_1 = __importDefault(require("../FileIcon"));
var Image_1 = __importDefault(require("../Image"));
var ContainerGrid = styled_components_1.default(theme_ui_1.Grid)(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  align-items: center;\n  cursor: ", ";\n  height: 100%;\n  pointer-events: ", ";\n  user-select: none;\n  white-space: nowrap;\n\n  ", "\n"], ["\n  align-items: center;\n  cursor: ", ";\n  height: 100%;\n  pointer-events: ", ";\n  user-select: none;\n  white-space: nowrap;\n\n  ",
    "\n"])), function (props) { return (props.selected ? 'default' : 'pointer'); }, function (props) { return (props.updating ? 'none' : 'auto'); }, function (props) {
    var _a;
    return !props.updating && styled_components_1.css(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n      @media (hover: hover) and (pointer: fine) {\n        &:hover {\n          background: ", ";\n        }\n      }\n    "], ["\n      @media (hover: hover) and (pointer: fine) {\n        &:hover {\n          background: ", ";\n        }\n      }\n    "])), (_a = color_1.hues.gray) === null || _a === void 0 ? void 0 : _a[950].hex);
});
var ContextActionContainer = styled_components_1.default(theme_ui_1.Flex)(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n  cursor: pointer;\n\n  @media (hover: hover) and (pointer: fine) {\n    &:hover {\n      background: ", ";\n    }\n  }\n"], ["\n  cursor: pointer;\n\n  @media (hover: hover) and (pointer: fine) {\n    &:hover {\n      background: ", ";\n    }\n  }\n"])), (_a = color_1.hues.gray) === null || _a === void 0 ? void 0 : _a[900].hex);
var StyledWarningIcon = styled_components_1.default(icons_1.WarningFilledIcon)(function (_a) {
    var theme = _a.theme;
    return {
        color: theme.sanity.color.spot.red
    };
});
var TableRowAsset = function (props) {
    var _a, _b;
    var id = props.id, selected = props.selected;
    // Refs
    var shiftPressed = useKeyPress_1.default('shift');
    // Redux
    var dispatch = react_redux_1.useDispatch();
    var lastPicked = useTypedSelector_1.default(function (state) { return state.assets.lastPicked; });
    var item = useTypedSelector_1.default(function (state) { return assets_1.selectAssetById(state, id); });
    var asset = item === null || item === void 0 ? void 0 : item.asset;
    var error = item === null || item === void 0 ? void 0 : item.error;
    var isOpaque = (_b = (_a = item === null || item === void 0 ? void 0 : item.asset) === null || _a === void 0 ? void 0 : _a.metadata) === null || _b === void 0 ? void 0 : _b.isOpaque;
    var picked = item === null || item === void 0 ? void 0 : item.picked;
    var updating = item === null || item === void 0 ? void 0 : item.updating;
    var onSelect = AssetSourceDispatchContext_1.useAssetSourceActions().onSelect;
    // Short circuit if no asset is available
    if (!asset) {
        return null;
    }
    // Callbacks
    var handleContextActionClick = function (e) {
        e.stopPropagation();
        if (onSelect) {
            dispatch(dialog_1.dialogActions.showAssetEdit({ assetId: asset._id }));
        }
        else if (shiftPressed.current && !picked) {
            dispatch(assets_1.assetsActions.pickRange({ startId: lastPicked || asset._id, endId: asset._id }));
        }
        else {
            dispatch(assets_1.assetsActions.pick({ assetId: asset._id, picked: !picked }));
        }
    };
    var handleClick = function (e) {
        e.stopPropagation();
        if (onSelect) {
            onSelect([
                {
                    kind: 'assetDocumentId',
                    value: asset._id
                }
            ]);
        }
        else if (shiftPressed.current) {
            if (picked) {
                dispatch(assets_1.assetsActions.pick({ assetId: asset._id, picked: !picked }));
            }
            else {
                dispatch(assets_1.assetsActions.pickRange({ startId: lastPicked || asset._id, endId: asset._id }));
            }
        }
        else {
            dispatch(dialog_1.dialogActions.showAssetEdit({ assetId: asset._id }));
        }
    };
    var opacityCell = updating ? 0.5 : 1;
    var opacityPreview = selected || updating ? 0.1 : 1;
    return (react_1.default.createElement(ContainerGrid, { onClick: selected ? undefined : handleClick, selected: selected, sx: {
            gridColumnGap: [0, null, null, 3],
            gridRowGap: [0],
            gridTemplateColumns: ['tableSmall', null, null, 'tableLarge'],
            gridTemplateRows: ['auto', null, null, '1fr']
        }, updating: item.updating },
        react_1.default.createElement(ContextActionContainer, { onClick: handleContextActionClick, sx: {
                alignItems: 'center',
                gridColumn: 1,
                gridRowStart: ['1', null, null, 'auto'],
                gridRowEnd: ['span 5', null, null, 'auto'],
                height: '100%',
                justifyContent: 'center',
                opacity: opacityCell,
                position: 'relative'
            } }, onSelect ? (react_1.default.createElement(icons_1.EditIcon, { style: {
                flexShrink: 0,
                opacity: 0.5
            } })) : (react_1.default.createElement(ui_1.Checkbox, { checked: picked, readOnly: true, style: {
                pointerEvents: 'none',
                transform: 'scale(0.8)'
            } }))),
        react_1.default.createElement(theme_ui_1.Box, { sx: {
                gridColumn: [2],
                gridRowStart: ['1', null, null, 'auto'],
                gridRowEnd: ['span 5', null, null, 'auto'],
                height: '90px',
                width: '100px'
            } },
            react_1.default.createElement(ui_1.Flex, { align: "center", justify: "center", style: { height: '100%', position: 'relative' } },
                react_1.default.createElement(ui_1.Box, { style: { height: '100%', opacity: opacityPreview, position: 'relative' } },
                    typeGuards_1.isFileAsset(asset) && react_1.default.createElement(FileIcon_1.default, { extension: asset.extension, width: "40px" }),
                    typeGuards_1.isImageAsset(asset) && (react_1.default.createElement(Image_1.default, { draggable: false, showCheckerboard: !isOpaque, src: imageDprUrl_1.default(asset, { height: 100, width: 100 }) }))),
                updating && (react_1.default.createElement(ui_1.Flex, { align: "center", justify: "center", style: {
                        height: '100%',
                        left: 0,
                        position: 'absolute',
                        top: 0,
                        width: '100%'
                    } },
                    react_1.default.createElement(ui_1.Spinner, null))),
                selected && !updating && (react_1.default.createElement(ui_1.Flex, { align: "center", justify: "center", style: {
                        height: '100%',
                        left: 0,
                        position: 'absolute',
                        top: 0,
                        width: '100%'
                    } },
                    react_1.default.createElement(ui_1.Text, { size: 2 },
                        react_1.default.createElement(icons_1.CheckmarkCircleIcon, null)))))),
        react_1.default.createElement(theme_ui_1.Box, { sx: {
                gridColumn: [3],
                gridRow: [2, null, null, 'auto'],
                marginLeft: [3, null, null, 0],
                opacity: opacityCell
            } },
            react_1.default.createElement(ui_1.Text, { muted: true, size: 1, style: { lineHeight: '2em' }, textOverflow: "ellipsis" }, asset.originalFilename)),
        react_1.default.createElement(theme_ui_1.Box, { sx: {
                gridColumn: [3, null, null, 4],
                gridRow: [3, null, null, 'auto'],
                marginLeft: [3, null, null, 0],
                opacity: opacityCell
            } },
            react_1.default.createElement(ui_1.Text, { muted: true, size: 1, style: { lineHeight: '2em' }, textOverflow: "ellipsis" }, typeGuards_1.isImageAsset(asset) && getAssetResolution_1.default(asset))),
        react_1.default.createElement(theme_ui_1.Box, { sx: {
                display: ['none', null, null, 'block'],
                gridColumn: 5,
                gridRow: 'auto',
                opacity: opacityCell
            } },
            react_1.default.createElement(ui_1.Text, { muted: true, size: 1, style: { lineHeight: '2em' }, textOverflow: "ellipsis" }, asset.mimeType)),
        react_1.default.createElement(theme_ui_1.Box, { sx: {
                display: ['none', null, null, 'block'],
                gridColumn: 6,
                gridRow: 'auto',
                opacity: opacityCell
            } },
            react_1.default.createElement(ui_1.Text, { muted: true, size: 1, style: { lineHeight: '2em' }, textOverflow: "ellipsis" }, filesize_1.default(asset.size, { base: 10, round: 0 }))),
        react_1.default.createElement(theme_ui_1.Box, { sx: {
                gridColumn: [3, null, null, 7],
                gridRow: [4, null, null, 'auto'],
                marginLeft: [3, null, null, 0],
                opacity: opacityCell
            } },
            react_1.default.createElement(ui_1.Text, { muted: true, size: 1, style: { lineHeight: '2em' }, textOverflow: "ellipsis" }, formatRelative_1.default(new Date(asset._updatedAt), new Date()))),
        react_1.default.createElement(theme_ui_1.Box, { sx: {
                gridColumn: [4, null, null, 8],
                gridRowStart: '1',
                gridRowEnd: ['span 5', null, null, 'auto'],
                mx: 'auto',
                opacity: opacityCell
            } }, error && (react_1.default.createElement(ui_1.Box, { padding: 3 },
            react_1.default.createElement(ui_1.Tooltip, { content: react_1.default.createElement(ui_1.Container, { padding: 2, width: 0 },
                    react_1.default.createElement(ui_1.Text, { size: 1 }, error)), placement: "left", portal: true },
                react_1.default.createElement(ui_1.Text, { size: 1 },
                    react_1.default.createElement(StyledWarningIcon, { color: "critical" }))))))));
};
exports.default = react_1.memo(TableRowAsset);
var templateObject_1, templateObject_2, templateObject_3;
//# sourceMappingURL=index.js.map