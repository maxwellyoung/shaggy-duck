"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.assetsActions = exports.selectAssetsPickedLength = exports.selectAssetsPicked = exports.selectAssetsLength = exports.selectAssets = exports.selectAssetById = exports.assetsUpdateEpic = exports.assetsUnpickEpic = exports.assetsTagsRemoveEpic = exports.assetsTagsAddEpic = exports.assetsSortEpic = exports.assetsListenerUpdateQueueEpic = exports.assetsListenerDeleteQueueEpic = exports.assetsListenerCreateQueueEpic = exports.assetsSearchEpic = exports.assetsOrderSetEpic = exports.assetsRemoveTagsEpic = exports.assetsFetchAfterDeleteAllEpic = exports.assetsFetchNextPageEpic = exports.assetsFetchPageIndexEpic = exports.assetsFetchEpic = exports.assetsDeleteEpic = exports.initialState = void 0;
var toolkit_1 = require("@reduxjs/toolkit");
var groq_1 = __importDefault(require("groq"));
var nanoid_1 = require("nanoid");
var redux_observable_1 = require("redux-observable");
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var client_1 = require("../../client");
var orders_1 = require("../../config/orders");
var constants_1 = require("../../constants");
var constructFilter_1 = __importDefault(require("../../utils/constructFilter"));
var debugThrottle_1 = __importDefault(require("../../operators/debugThrottle"));
var search_1 = require("../search");
var uploads_1 = require("../uploads");
var defaultOrder = constants_1.ORDER_OPTIONS[0];
/**
 * NOTE:
 * `fetchCount` returns the number of items retrieved in the most recent fetch.
 * This is a temporary workaround to be able to determine when there are no more items to retrieve.
 * Typically this would be done by deriving the total number of assets upfront, but currently such
 * queries in GROQ aren't fast enough to use on large datasets (1000s of entries).
 *
 * TODO:
 * When the query engine has been improved and above queries are faster, remove all instances of
 * of `fetchCount` and reinstate `totalCount` across the board.
 */
exports.initialState = {
    allIds: [],
    assetTypes: [],
    byIds: {},
    fetchCount: -1,
    fetching: false,
    fetchingError: undefined,
    lastPicked: undefined,
    order: {
        direction: defaultOrder.direction,
        field: defaultOrder.field,
        title: orders_1.getOrderTitle(defaultOrder.field, defaultOrder.direction)
    },
    pageIndex: 0,
    pageSize: 50,
    // totalCount: -1,
    view: 'grid'
};
var assetsSlice = toolkit_1.createSlice({
    name: 'assets',
    initialState: exports.initialState,
    extraReducers: function (builder) {
        builder //
            .addCase(uploads_1.uploadsActions.uploadComplete, function (state, action) {
            var asset = action.payload.asset;
            state.byIds[asset._id] = {
                _type: 'asset',
                asset: asset,
                picked: false,
                updating: false
            };
        });
    },
    reducers: {
        // Clear asset order
        clear: function (state) {
            state.allIds = [];
        },
        // Remove assets and update page index
        deleteComplete: function (state, action) {
            var assetIds = action.payload.assetIds;
            assetIds === null || assetIds === void 0 ? void 0 : assetIds.forEach(function (id) {
                var deleteIndex = state.allIds.indexOf(id);
                if (deleteIndex >= 0) {
                    state.allIds.splice(deleteIndex, 1);
                }
                delete state.byIds[id];
            });
            state.pageIndex = Math.floor(state.allIds.length / state.pageSize) - 1;
        },
        deleteError: function (state, action) {
            var _a, _b, _c, _d;
            var _e = action.payload, assetIds = _e.assetIds, error = _e.error;
            var itemErrors = (_d = (_c = (_b = (_a = error === null || error === void 0 ? void 0 : error.response) === null || _a === void 0 ? void 0 : _a.body) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.items) === null || _d === void 0 ? void 0 : _d.map(function (item) { return item.error; });
            assetIds === null || assetIds === void 0 ? void 0 : assetIds.forEach(function (id) {
                state.byIds[id].updating = false;
            });
            itemErrors === null || itemErrors === void 0 ? void 0 : itemErrors.forEach(function (item) {
                state.byIds[item.id].error = item.description;
            });
        },
        deleteRequest: function (state, action) {
            var assets = action.payload.assets;
            assets.forEach(function (asset) {
                state.byIds[asset === null || asset === void 0 ? void 0 : asset._id].updating = true;
            });
            Object.keys(state.byIds).forEach(function (key) {
                delete state.byIds[key].error;
            });
        },
        fetchComplete: function (state, action) {
            var _a;
            var assets = ((_a = action.payload) === null || _a === void 0 ? void 0 : _a.assets) || [];
            if (assets) {
                assets.forEach(function (asset) {
                    if (!state.allIds.includes(asset._id)) {
                        state.allIds.push(asset._id);
                    }
                    state.byIds[asset._id] = {
                        _type: 'asset',
                        asset: asset,
                        picked: false,
                        updating: false
                    };
                });
            }
            state.fetching = false;
            state.fetchCount = assets.length || 0;
            delete state.fetchingError;
        },
        fetchError: function (state, action) {
            var error = action.payload;
            state.fetching = false;
            state.fetchingError = error;
        },
        fetchRequest: {
            reducer: function (state, _action) {
                state.fetching = true;
                delete state.fetchingError;
            },
            prepare: function (_a) {
                var _b = _a.params, params = _b === void 0 ? {} : _b, queryFilter = _a.queryFilter, _c = _a.selector, selector = _c === void 0 ? "" : _c, _d = _a.sort, sort = _d === void 0 ? groq_1.default(templateObject_1 || (templateObject_1 = __makeTemplateObject(["order(_updatedAt desc)"], ["order(_updatedAt desc)"]))) : _d;
                var pipe = sort || selector ? '|' : '';
                // Construct query
                var query = groq_1.default(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n          {\n            \"items\": *[", "] {\n              _id,\n              _type,\n              _createdAt,\n              _updatedAt,\n              altText,\n              description,\n              extension,\n              metadata {\n                dimensions,\n                exif,\n                isOpaque,\n              },\n              mimeType,\n              opt {\n                media\n              },\n              originalFilename,\n              size,\n              title,\n              url\n            } ", " ", " ", ",\n          }\n        "], ["\n          {\n            \"items\": *[", "] {\n              _id,\n              _type,\n              _createdAt,\n              _updatedAt,\n              altText,\n              description,\n              extension,\n              metadata {\n                dimensions,\n                exif,\n                isOpaque,\n              },\n              mimeType,\n              opt {\n                media\n              },\n              originalFilename,\n              size,\n              title,\n              url\n            } ", " ", " ", ",\n          }\n        "])), queryFilter, pipe, sort, selector);
                return { payload: { params: params, query: query } };
            }
        },
        insertUploads: function (state, action) {
            var results = action.payload.results;
            Object.entries(results).forEach(function (_a) {
                var _b = __read(_a, 2), hash = _b[0], assetId = _b[1];
                if (assetId && !state.allIds.includes(hash)) {
                    state.allIds.push(assetId);
                }
            });
        },
        listenerCreateQueue: function (_state, _action) {
            //
        },
        listenerCreateQueueComplete: function (state, action) {
            var assets = action.payload.assets;
            assets === null || assets === void 0 ? void 0 : assets.forEach(function (asset) {
                var _a;
                if ((_a = state.byIds[asset === null || asset === void 0 ? void 0 : asset._id]) === null || _a === void 0 ? void 0 : _a.asset) {
                    state.byIds[asset._id].asset = asset;
                }
            });
        },
        listenerDeleteQueue: function (_state, _action) {
            //
        },
        listenerDeleteQueueComplete: function (state, action) {
            var assetIds = action.payload.assetIds;
            assetIds === null || assetIds === void 0 ? void 0 : assetIds.forEach(function (assetId) {
                var deleteIndex = state.allIds.indexOf(assetId);
                if (deleteIndex >= 0) {
                    state.allIds.splice(deleteIndex, 1);
                }
                delete state.byIds[assetId];
            });
        },
        listenerUpdateQueue: function (_state, _action) {
            //
        },
        listenerUpdateQueueComplete: function (state, action) {
            var assets = action.payload.assets;
            assets === null || assets === void 0 ? void 0 : assets.forEach(function (asset) {
                var _a;
                if ((_a = state.byIds[asset === null || asset === void 0 ? void 0 : asset._id]) === null || _a === void 0 ? void 0 : _a.asset) {
                    state.byIds[asset._id].asset = asset;
                }
            });
        },
        loadNextPage: function () {
            //
        },
        loadPageIndex: function (state, action) {
            //
            state.pageIndex = action.payload.pageIndex;
        },
        orderSet: function (state, action) {
            var _a;
            state.order = (_a = action.payload) === null || _a === void 0 ? void 0 : _a.order;
            state.pageIndex = 0;
        },
        pick: function (state, action) {
            var _a = action.payload, assetId = _a.assetId, picked = _a.picked;
            state.byIds[assetId].picked = picked;
            state.lastPicked = picked ? assetId : undefined;
        },
        pickAll: function (state) {
            state.allIds.forEach(function (id) {
                state.byIds[id].picked = true;
            });
        },
        pickClear: function (state) {
            state.lastPicked = undefined;
            Object.values(state.byIds).forEach(function (asset) {
                state.byIds[asset.asset._id].picked = false;
            });
        },
        pickRange: function (state, action) {
            var startIndex = state.allIds.findIndex(function (id) { return id === action.payload.startId; });
            var endIndex = state.allIds.findIndex(function (id) { return id === action.payload.endId; });
            // Sort numerically, ascending order
            var indices = [startIndex, endIndex].sort(function (a, b) { return a - b; });
            state.allIds.slice(indices[0], indices[1] + 1).forEach(function (key) {
                state.byIds[key].picked = true;
            });
            state.lastPicked = state.allIds[endIndex];
        },
        sort: function (state) {
            state.allIds.sort(function (a, b) {
                var tagA = state.byIds[a].asset[state.order.field];
                var tagB = state.byIds[b].asset[state.order.field];
                if (tagA < tagB) {
                    return state.order.direction === 'asc' ? -1 : 1;
                }
                else if (tagA > tagB) {
                    return state.order.direction === 'asc' ? 1 : -1;
                }
                return 0;
            });
        },
        tagsAddComplete: function (state, action) {
            var assets = action.payload.assets;
            assets.forEach(function (asset) {
                state.byIds[asset.asset._id].updating = false;
            });
        },
        tagsAddError: function (state, action) {
            var assets = action.payload.assets;
            assets.forEach(function (asset) {
                state.byIds[asset.asset._id].updating = false;
            });
        },
        tagsAddRequest: function (state, action) {
            var assets = action.payload.assets;
            assets.forEach(function (asset) {
                state.byIds[asset.asset._id].updating = true;
            });
        },
        tagsRemoveComplete: function (state, action) {
            var assets = action.payload.assets;
            assets.forEach(function (asset) {
                state.byIds[asset.asset._id].updating = false;
            });
        },
        tagsRemoveError: function (state, action) {
            var assets = action.payload.assets;
            assets.forEach(function (asset) {
                state.byIds[asset.asset._id].updating = false;
            });
        },
        tagsRemoveRequest: function (state, action) {
            var assets = action.payload.assets;
            assets.forEach(function (asset) {
                state.byIds[asset.asset._id].updating = true;
            });
        },
        updateComplete: function (state, action) {
            var asset = action.payload.asset;
            state.byIds[asset._id].updating = false;
            state.byIds[asset._id].asset = asset;
        },
        updateError: function (state, action) {
            var _a = action.payload, asset = _a.asset, error = _a.error;
            var assetId = asset === null || asset === void 0 ? void 0 : asset._id;
            state.byIds[assetId].error = error.message;
            state.byIds[assetId].updating = false;
        },
        updateRequest: function (state, action) {
            var _a, _b;
            var assetId = (_b = (_a = action.payload) === null || _a === void 0 ? void 0 : _a.asset) === null || _b === void 0 ? void 0 : _b._id;
            state.byIds[assetId].updating = true;
        },
        viewSet: function (state, action) {
            var _a;
            state.view = (_a = action.payload) === null || _a === void 0 ? void 0 : _a.view;
        }
    }
});
var assetsDeleteEpic = function (action$) {
    return action$.pipe(operators_1.filter(exports.assetsActions.deleteRequest.match), operators_1.mergeMap(function (action) {
        var assets = action.payload.assets;
        var assetIds = assets.map(function (asset) { return asset._id; });
        return rxjs_1.of(assets).pipe(operators_1.mergeMap(function () {
            return client_1.client.observable.delete({
                query: groq_1.default(templateObject_3 || (templateObject_3 = __makeTemplateObject(["*[_id in ", "]"], ["*[_id in ", "]"])), JSON.stringify(assetIds))
            });
        }), operators_1.mergeMap(function () { return rxjs_1.of(exports.assetsActions.deleteComplete({ assetIds: assetIds })); }), operators_1.catchError(function (error) {
            return rxjs_1.of(exports.assetsActions.deleteError({ assetIds: assetIds, error: error }));
        }));
    }));
};
exports.assetsDeleteEpic = assetsDeleteEpic;
var assetsFetchEpic = function (action$, state$) {
    return action$.pipe(operators_1.filter(exports.assetsActions.fetchRequest.match), operators_1.withLatestFrom(state$), operators_1.switchMap(function (_a) {
        var _b, _c;
        var _d = __read(_a, 2), action = _d[0], state = _d[1];
        var params = (_b = action.payload) === null || _b === void 0 ? void 0 : _b.params;
        var query = (_c = action.payload) === null || _c === void 0 ? void 0 : _c.query;
        return rxjs_1.of(action).pipe(debugThrottle_1.default(state.debug.badConnection), operators_1.mergeMap(function () {
            return client_1.client.observable.fetch(query, params);
        }), operators_1.mergeMap(function (result) {
            var items = result.items
            // totalCount
            ;
            return rxjs_1.of(exports.assetsActions.fetchComplete({ assets: items }));
        }), operators_1.catchError(function (error) {
            return rxjs_1.of(exports.assetsActions.fetchError({
                message: (error === null || error === void 0 ? void 0 : error.message) || 'Internal error',
                statusCode: (error === null || error === void 0 ? void 0 : error.statusCode) || 500
            }));
        }));
    }));
};
exports.assetsFetchEpic = assetsFetchEpic;
var assetsFetchPageIndexEpic = function (action$, state$) {
    return action$.pipe(operators_1.filter(exports.assetsActions.loadPageIndex.match), operators_1.withLatestFrom(state$), operators_1.switchMap(function (_a) {
        var _b, _c, _d, _e, _f, _g;
        var _h = __read(_a, 2), action = _h[0], state = _h[1];
        var pageSize = state.assets.pageSize;
        var start = action.payload.pageIndex * pageSize;
        var end = start + pageSize;
        // Document ID can be null when operating on pristine / unsaved drafts
        var documentId = (_b = state === null || state === void 0 ? void 0 : state.selected.document) === null || _b === void 0 ? void 0 : _b._id;
        var documentAssetIds = (_c = state === null || state === void 0 ? void 0 : state.selected) === null || _c === void 0 ? void 0 : _c.documentAssetIds;
        var constructedFilter = constructFilter_1.default({
            assetTypes: state.assets.assetTypes,
            searchFacets: state.search.facets,
            searchQuery: state.search.query
        });
        var params = __assign(__assign({}, (documentId ? { documentId: documentId } : {})), { documentAssetIds: documentAssetIds });
        return rxjs_1.of(exports.assetsActions.fetchRequest({
            params: params,
            queryFilter: constructedFilter,
            selector: groq_1.default(templateObject_4 || (templateObject_4 = __makeTemplateObject(["[", "...", "]"], ["[", "...", "]"])), start, end),
            sort: groq_1.default(templateObject_5 || (templateObject_5 = __makeTemplateObject(["order(", " ", ")"], ["order(", " ", ")"])), (_e = (_d = state.assets) === null || _d === void 0 ? void 0 : _d.order) === null || _e === void 0 ? void 0 : _e.field, (_g = (_f = state.assets) === null || _f === void 0 ? void 0 : _f.order) === null || _g === void 0 ? void 0 : _g.direction)
        }));
    }));
};
exports.assetsFetchPageIndexEpic = assetsFetchPageIndexEpic;
var assetsFetchNextPageEpic = function (action$, state$) {
    return action$.pipe(operators_1.filter(exports.assetsActions.loadNextPage.match), operators_1.withLatestFrom(state$), operators_1.switchMap(function (_a) {
        var _b = __read(_a, 2), _action = _b[0], state = _b[1];
        return rxjs_1.of(exports.assetsActions.loadPageIndex({ pageIndex: state.assets.pageIndex + 1 }));
    }));
};
exports.assetsFetchNextPageEpic = assetsFetchNextPageEpic;
var assetsFetchAfterDeleteAllEpic = function (action$, state$) {
    return action$.pipe(operators_1.filter(exports.assetsActions.deleteComplete.match), operators_1.withLatestFrom(state$), operators_1.switchMap(function (_a) {
        var _b = __read(_a, 2), _action = _b[0], state = _b[1];
        if (state.assets.allIds.length === 0) {
            var nextPageIndex = Math.floor(state.assets.allIds.length / state.assets.pageSize);
            return rxjs_1.of(exports.assetsActions.loadPageIndex({ pageIndex: nextPageIndex }));
        }
        return rxjs_1.empty();
    }));
};
exports.assetsFetchAfterDeleteAllEpic = assetsFetchAfterDeleteAllEpic;
var filterAssetWithoutTag = function (tag) { return function (asset) {
    var _a, _b, _c, _d, _e;
    var tagIndex = (_e = (_d = (_c = (_b = (_a = asset === null || asset === void 0 ? void 0 : asset.asset) === null || _a === void 0 ? void 0 : _a.opt) === null || _b === void 0 ? void 0 : _b.media) === null || _c === void 0 ? void 0 : _c.tags) === null || _d === void 0 ? void 0 : _d.findIndex(function (t) { return t._ref === (tag === null || tag === void 0 ? void 0 : tag._id); })) !== null && _e !== void 0 ? _e : -1;
    return tagIndex < 0;
}; };
var patchOperationTagAppend = function (_a) {
    var tag = _a.tag;
    return function (patch) {
        return patch
            .setIfMissing({ opt: {} })
            .setIfMissing({ 'opt.media': {} })
            .setIfMissing({ 'opt.media.tags': [] })
            .append('opt.media.tags', [{ _key: nanoid_1.nanoid(), _ref: tag === null || tag === void 0 ? void 0 : tag._id, _type: 'reference', _weak: true }]);
    };
};
var patchOperationTagUnset = function (_a) {
    var asset = _a.asset, tag = _a.tag;
    return function (patch) { var _a; return patch.ifRevisionId((_a = asset === null || asset === void 0 ? void 0 : asset.asset) === null || _a === void 0 ? void 0 : _a._rev).unset(["opt.media.tags[_ref == \"" + tag._id + "\"]"]); };
};
var assetsRemoveTagsEpic = function (action$, state$) {
    return action$.pipe(operators_1.filter(exports.assetsActions.tagsAddRequest.match), operators_1.withLatestFrom(state$), operators_1.mergeMap(function (_a) {
        var _b = __read(_a, 2), action = _b[0], state = _b[1];
        var _c = action.payload, assets = _c.assets, tag = _c.tag;
        return rxjs_1.of(action).pipe(
        // Optionally throttle
        debugThrottle_1.default(state.debug.badConnection), 
        // Add tag references to all picked assets
        operators_1.mergeMap(function () {
            var pickedAssets = exports.selectAssetsPicked(state);
            // Filter out picked assets which already include tag
            var pickedAssetsFiltered = pickedAssets === null || pickedAssets === void 0 ? void 0 : pickedAssets.filter(filterAssetWithoutTag(tag));
            var transaction = pickedAssetsFiltered.reduce(function (tx, pickedAsset) { var _a; return tx.patch((_a = pickedAsset === null || pickedAsset === void 0 ? void 0 : pickedAsset.asset) === null || _a === void 0 ? void 0 : _a._id, patchOperationTagAppend({ tag: tag })); }, client_1.client.transaction());
            return rxjs_1.from(transaction.commit());
        }), 
        // Dispatch complete action
        operators_1.mergeMap(function () { return rxjs_1.of(exports.assetsActions.tagsAddComplete({ assets: assets, tag: tag })); }), operators_1.catchError(function (error) {
            return rxjs_1.of(exports.assetsActions.tagsAddError({
                assets: assets,
                error: {
                    message: (error === null || error === void 0 ? void 0 : error.message) || 'Internal error',
                    statusCode: (error === null || error === void 0 ? void 0 : error.statusCode) || 500
                },
                tag: tag
            }));
        }));
    }));
};
exports.assetsRemoveTagsEpic = assetsRemoveTagsEpic;
var assetsOrderSetEpic = function (action$) {
    return action$.pipe(operators_1.filter(exports.assetsActions.orderSet.match), operators_1.mergeMap(function () {
        return rxjs_1.of(exports.assetsActions.clear(), //
        exports.assetsActions.loadPageIndex({ pageIndex: 0 }));
    }));
};
exports.assetsOrderSetEpic = assetsOrderSetEpic;
var assetsSearchEpic = function (action$) {
    return action$.pipe(redux_observable_1.ofType(search_1.searchActions.facetsAdd.type, search_1.searchActions.facetsClear.type, search_1.searchActions.facetsRemove.type, search_1.searchActions.facetsUpdate.type, search_1.searchActions.querySet.type), operators_1.debounceTime(400), operators_1.mergeMap(function () {
        return rxjs_1.of(exports.assetsActions.clear(), //
        exports.assetsActions.loadPageIndex({ pageIndex: 0 }));
    }));
};
exports.assetsSearchEpic = assetsSearchEpic;
var assetsListenerCreateQueueEpic = function (action$) {
    return action$.pipe(operators_1.filter(exports.assetsActions.listenerCreateQueue.match), operators_1.bufferTime(2000), operators_1.filter(function (actions) { return actions.length > 0; }), operators_1.mergeMap(function (actions) {
        var assets = actions === null || actions === void 0 ? void 0 : actions.map(function (action) { return action.payload.asset; });
        return rxjs_1.of(exports.assetsActions.listenerCreateQueueComplete({ assets: assets }));
    }));
};
exports.assetsListenerCreateQueueEpic = assetsListenerCreateQueueEpic;
var assetsListenerDeleteQueueEpic = function (action$) {
    return action$.pipe(operators_1.filter(exports.assetsActions.listenerDeleteQueue.match), operators_1.bufferTime(2000), operators_1.filter(function (actions) { return actions.length > 0; }), operators_1.mergeMap(function (actions) {
        var assetIds = actions === null || actions === void 0 ? void 0 : actions.map(function (action) { return action.payload.assetId; });
        return rxjs_1.of(exports.assetsActions.listenerDeleteQueueComplete({ assetIds: assetIds }));
    }));
};
exports.assetsListenerDeleteQueueEpic = assetsListenerDeleteQueueEpic;
var assetsListenerUpdateQueueEpic = function (action$) {
    return action$.pipe(operators_1.filter(exports.assetsActions.listenerUpdateQueue.match), operators_1.bufferTime(2000), operators_1.filter(function (actions) { return actions.length > 0; }), operators_1.mergeMap(function (actions) {
        var assets = actions === null || actions === void 0 ? void 0 : actions.map(function (action) { return action.payload.asset; });
        return rxjs_1.of(exports.assetsActions.listenerUpdateQueueComplete({ assets: assets }));
    }));
};
exports.assetsListenerUpdateQueueEpic = assetsListenerUpdateQueueEpic;
// Re-sort on all updates (immediate and batched listener events)
var assetsSortEpic = function (action$) {
    return action$.pipe(redux_observable_1.ofType(exports.assetsActions.insertUploads.type, exports.assetsActions.listenerUpdateQueueComplete.type, exports.assetsActions.updateComplete.type), operators_1.mergeMap(function () { return rxjs_1.of(exports.assetsActions.sort()); }));
};
exports.assetsSortEpic = assetsSortEpic;
var assetsTagsAddEpic = function (action$, state$) {
    return action$.pipe(operators_1.filter(exports.assetsActions.tagsAddRequest.match), operators_1.withLatestFrom(state$), operators_1.mergeMap(function (_a) {
        var _b = __read(_a, 2), action = _b[0], state = _b[1];
        var _c = action.payload, assets = _c.assets, tag = _c.tag;
        return rxjs_1.of(action).pipe(
        // Optionally throttle
        debugThrottle_1.default(state.debug.badConnection), 
        // Add tag references to all picked assets
        operators_1.mergeMap(function () {
            var pickedAssets = exports.selectAssetsPicked(state);
            // Filter out picked assets which already include tag
            var pickedAssetsFiltered = pickedAssets === null || pickedAssets === void 0 ? void 0 : pickedAssets.filter(filterAssetWithoutTag(tag));
            var transaction = pickedAssetsFiltered.reduce(function (tx, pickedAsset) { var _a; return tx.patch((_a = pickedAsset === null || pickedAsset === void 0 ? void 0 : pickedAsset.asset) === null || _a === void 0 ? void 0 : _a._id, patchOperationTagAppend({ tag: tag })); }, client_1.client.transaction());
            return rxjs_1.from(transaction.commit());
        }), 
        // Dispatch complete action
        operators_1.mergeMap(function () { return rxjs_1.of(exports.assetsActions.tagsAddComplete({ assets: assets, tag: tag })); }), operators_1.catchError(function (error) {
            return rxjs_1.of(exports.assetsActions.tagsAddError({
                assets: assets,
                error: {
                    message: (error === null || error === void 0 ? void 0 : error.message) || 'Internal error',
                    statusCode: (error === null || error === void 0 ? void 0 : error.statusCode) || 500
                },
                tag: tag
            }));
        }));
    }));
};
exports.assetsTagsAddEpic = assetsTagsAddEpic;
var assetsTagsRemoveEpic = function (action$, state$) {
    return action$.pipe(operators_1.filter(exports.assetsActions.tagsRemoveRequest.match), operators_1.withLatestFrom(state$), operators_1.mergeMap(function (_a) {
        var _b = __read(_a, 2), action = _b[0], state = _b[1];
        var _c = action.payload, assets = _c.assets, tag = _c.tag;
        return rxjs_1.of(action).pipe(
        // Optionally throttle
        debugThrottle_1.default(state.debug.badConnection), 
        // Remove tag references from all picked assets
        operators_1.mergeMap(function () {
            var pickedAssets = exports.selectAssetsPicked(state);
            var transaction = pickedAssets.reduce(function (tx, pickedAsset) { var _a; return tx.patch((_a = pickedAsset === null || pickedAsset === void 0 ? void 0 : pickedAsset.asset) === null || _a === void 0 ? void 0 : _a._id, patchOperationTagUnset({ asset: pickedAsset, tag: tag })); }, client_1.client.transaction());
            return rxjs_1.from(transaction.commit());
        }), 
        // Dispatch complete action
        operators_1.mergeMap(function () { return rxjs_1.of(exports.assetsActions.tagsRemoveComplete({ assets: assets, tag: tag })); }), operators_1.catchError(function (error) {
            return rxjs_1.of(exports.assetsActions.tagsRemoveError({
                assets: assets,
                error: {
                    message: (error === null || error === void 0 ? void 0 : error.message) || 'Internal error',
                    statusCode: (error === null || error === void 0 ? void 0 : error.statusCode) || 500
                },
                tag: tag
            }));
        }));
    }));
};
exports.assetsTagsRemoveEpic = assetsTagsRemoveEpic;
var assetsUnpickEpic = function (action$) {
    return action$.pipe(redux_observable_1.ofType(exports.assetsActions.orderSet.type, exports.assetsActions.viewSet.type, search_1.searchActions.facetsAdd.type, search_1.searchActions.facetsClear.type, search_1.searchActions.facetsRemove.type, search_1.searchActions.facetsUpdate.type, search_1.searchActions.querySet.type), operators_1.mergeMap(function () {
        return rxjs_1.of(exports.assetsActions.pickClear());
    }));
};
exports.assetsUnpickEpic = assetsUnpickEpic;
var assetsUpdateEpic = function (action$, state$) {
    return action$.pipe(operators_1.filter(exports.assetsActions.updateRequest.match), operators_1.withLatestFrom(state$), operators_1.mergeMap(function (_a) {
        var _b = __read(_a, 2), action = _b[0], state = _b[1];
        var _c = action.payload, asset = _c.asset, closeDialogId = _c.closeDialogId, formData = _c.formData;
        return rxjs_1.of(action).pipe(debugThrottle_1.default(state.debug.badConnection), operators_1.mergeMap(function () {
            return rxjs_1.from(client_1.client
                .patch(asset._id)
                .setIfMissing({ opt: {} })
                .setIfMissing({ 'opt.media': {} })
                .set(formData)
                .commit());
        }), operators_1.mergeMap(function (updatedAsset) {
            return rxjs_1.of(exports.assetsActions.updateComplete({
                asset: updatedAsset,
                closeDialogId: closeDialogId
            }));
        }), operators_1.catchError(function (error) {
            return rxjs_1.of(exports.assetsActions.updateError({
                asset: asset,
                error: {
                    message: (error === null || error === void 0 ? void 0 : error.message) || 'Internal error',
                    statusCode: (error === null || error === void 0 ? void 0 : error.statusCode) || 500
                }
            }));
        }));
    }));
};
exports.assetsUpdateEpic = assetsUpdateEpic;
// Selectors
var selectAssetsByIds = function (state) { return state.assets.byIds; };
var selectAssetsAllIds = function (state) { return state.assets.allIds; };
exports.selectAssetById = toolkit_1.createSelector([
    function (state) { return state.assets.byIds; },
    function (_state, assetId) { return assetId; }
], function (byIds, assetId) { return byIds[assetId]; });
exports.selectAssets = toolkit_1.createSelector([selectAssetsByIds, selectAssetsAllIds], function (byIds, allIds) { return allIds.map(function (id) { return byIds[id]; }); });
exports.selectAssetsLength = toolkit_1.createSelector([exports.selectAssets], function (assets) { return assets.length; });
exports.selectAssetsPicked = toolkit_1.createSelector([exports.selectAssets], function (assets) {
    return assets.filter(function (item) { return item === null || item === void 0 ? void 0 : item.picked; });
});
exports.selectAssetsPickedLength = toolkit_1.createSelector([exports.selectAssetsPicked], function (assetsPicked) { return assetsPicked.length; });
exports.assetsActions = assetsSlice.actions;
exports.default = assetsSlice.reducer;
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5;
//# sourceMappingURL=index.js.map