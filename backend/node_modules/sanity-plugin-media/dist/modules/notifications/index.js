"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.notificationsActions = exports.notificationsTagUpdateCompleteEpic = exports.notificationsTagDeleteCompleteEpic = exports.notificationsTagCreateCompleteEpic = exports.notificationsGenericErrorEpic = exports.notificationsAssetsUpdateCompleteEpic = exports.notificationsAssetsTagsRemoveCompleteEpic = exports.notificationsAssetsTagsAddCompleteEpic = exports.notificationsAssetsUploadCompleteEpic = exports.notificationsAssetsDeleteErrorEpic = exports.notificationsAssetsDeleteCompleteEpic = void 0;
var toolkit_1 = require("@reduxjs/toolkit");
var pluralize_1 = __importDefault(require("pluralize"));
var redux_observable_1 = require("redux-observable");
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var assets_1 = require("../assets");
var tags_1 = require("../tags");
var uploads_1 = require("../uploads");
var initialState = {
    items: []
};
var notificationsSlice = toolkit_1.createSlice({
    name: 'notifications',
    initialState: initialState,
    reducers: {
        add: function (state, action) {
            var _a = action.payload, asset = _a.asset, status = _a.status, title = _a.title;
            state.items.push({
                asset: asset,
                status: status,
                title: title
            });
        }
    }
});
var notificationsAssetsDeleteCompleteEpic = function (action$) {
    return action$.pipe(operators_1.filter(assets_1.assetsActions.deleteComplete.match), operators_1.mergeMap(function (action) {
        var assetIds = action.payload.assetIds;
        var deletedCount = assetIds.length;
        return rxjs_1.of(notificationsSlice.actions.add({
            status: 'info',
            title: deletedCount + " " + pluralize_1.default('asset', deletedCount) + " deleted"
        }));
    }));
};
exports.notificationsAssetsDeleteCompleteEpic = notificationsAssetsDeleteCompleteEpic;
var notificationsAssetsDeleteErrorEpic = function (action$) {
    return action$.pipe(operators_1.filter(assets_1.assetsActions.deleteError.match), operators_1.mergeMap(function (action) {
        var assetIds = action.payload.assetIds;
        var count = assetIds.length;
        return rxjs_1.of(notificationsSlice.actions.add({
            status: 'error',
            title: "Unable to delete " + count + " " + pluralize_1.default('asset', count) + ". Please review any asset errors and try again."
        }));
    }));
};
exports.notificationsAssetsDeleteErrorEpic = notificationsAssetsDeleteErrorEpic;
var notificationsAssetsUploadCompleteEpic = function (action$) {
    return action$.pipe(operators_1.filter(uploads_1.uploadsActions.checkComplete.match), operators_1.mergeMap(function (action) {
        var results = action.payload.results;
        var count = Object.keys(results).length;
        return rxjs_1.of(notificationsSlice.actions.add({
            status: 'info',
            title: "Uploaded " + count + " " + pluralize_1.default('asset', count)
        }));
    }));
};
exports.notificationsAssetsUploadCompleteEpic = notificationsAssetsUploadCompleteEpic;
var notificationsAssetsTagsAddCompleteEpic = function (action$) {
    return action$.pipe(operators_1.filter(assets_1.assetsActions.tagsAddComplete.match), operators_1.mergeMap(function (action) {
        var _a, _b;
        var count = (_b = (_a = action === null || action === void 0 ? void 0 : action.payload) === null || _a === void 0 ? void 0 : _a.assets) === null || _b === void 0 ? void 0 : _b.length;
        return rxjs_1.of(notificationsSlice.actions.add({
            status: 'info',
            title: "Tag added to " + count + " " + pluralize_1.default('asset', count)
        }));
    }));
};
exports.notificationsAssetsTagsAddCompleteEpic = notificationsAssetsTagsAddCompleteEpic;
var notificationsAssetsTagsRemoveCompleteEpic = function (action$) {
    return action$.pipe(operators_1.filter(assets_1.assetsActions.tagsRemoveComplete.match), operators_1.mergeMap(function (action) {
        var _a, _b;
        var count = (_b = (_a = action === null || action === void 0 ? void 0 : action.payload) === null || _a === void 0 ? void 0 : _a.assets) === null || _b === void 0 ? void 0 : _b.length;
        return rxjs_1.of(notificationsSlice.actions.add({
            status: 'info',
            title: "Tag removed from " + count + " " + pluralize_1.default('asset', count)
        }));
    }));
};
exports.notificationsAssetsTagsRemoveCompleteEpic = notificationsAssetsTagsRemoveCompleteEpic;
var notificationsAssetsUpdateCompleteEpic = function (action$) {
    return action$.pipe(operators_1.filter(assets_1.assetsActions.updateComplete.match), operators_1.bufferTime(2000), operators_1.filter(function (actions) { return actions.length > 0; }), operators_1.mergeMap(function (actions) {
        var updatedCount = actions.length;
        return rxjs_1.of(notificationsSlice.actions.add({
            status: 'info',
            title: updatedCount + " " + pluralize_1.default('asset', updatedCount) + " updated"
        }));
    }));
};
exports.notificationsAssetsUpdateCompleteEpic = notificationsAssetsUpdateCompleteEpic;
var notificationsGenericErrorEpic = function (action$) {
    return action$.pipe(redux_observable_1.ofType(assets_1.assetsActions.fetchError.type, assets_1.assetsActions.updateError.type, tags_1.tagsActions.createError.type, tags_1.tagsActions.deleteError.type, tags_1.tagsActions.fetchError.type, tags_1.tagsActions.updateError.type, uploads_1.uploadsActions.uploadError.type), operators_1.mergeMap(function (action) {
        var _a;
        var error = (_a = action.payload) === null || _a === void 0 ? void 0 : _a.error;
        return rxjs_1.of(notificationsSlice.actions.add({
            status: 'error',
            title: "An error occured: " + error.message
        }));
    }));
};
exports.notificationsGenericErrorEpic = notificationsGenericErrorEpic;
var notificationsTagCreateCompleteEpic = function (action$) {
    return action$.pipe(operators_1.filter(tags_1.tagsActions.createComplete.match), operators_1.mergeMap(function () { return rxjs_1.of(notificationsSlice.actions.add({ status: 'info', title: "Tag created" })); }));
};
exports.notificationsTagCreateCompleteEpic = notificationsTagCreateCompleteEpic;
var notificationsTagDeleteCompleteEpic = function (action$) {
    return action$.pipe(operators_1.filter(tags_1.tagsActions.deleteComplete.match), operators_1.mergeMap(function () { return rxjs_1.of(notificationsSlice.actions.add({ status: 'info', title: "Tag deleted" })); }));
};
exports.notificationsTagDeleteCompleteEpic = notificationsTagDeleteCompleteEpic;
var notificationsTagUpdateCompleteEpic = function (action$) {
    return action$.pipe(operators_1.filter(tags_1.tagsActions.updateComplete.match), operators_1.mergeMap(function () { return rxjs_1.of(notificationsSlice.actions.add({ status: 'info', title: "Tag updated" })); }));
};
exports.notificationsTagUpdateCompleteEpic = notificationsTagUpdateCompleteEpic;
exports.notificationsActions = notificationsSlice.actions;
exports.default = notificationsSlice.reducer;
//# sourceMappingURL=index.js.map