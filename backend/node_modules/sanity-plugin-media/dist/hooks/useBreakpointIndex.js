"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ui_1 = require("@sanity/ui");
var react_1 = require("react");
// Determine the current breakpoint index
// - create MediaQueryLists from every breakpoint defined in our sanity studio theme
// - for each MQL, listen to change events and return the selected breakpoint index
var useBreakpointIndex = function () {
    var _a;
    var mediaQueryLists = (_a = ui_1.studioTheme === null || ui_1.studioTheme === void 0 ? void 0 : ui_1.studioTheme.container) === null || _a === void 0 ? void 0 : _a.map(function (width) {
        return window.matchMedia("(max-width: " + width + "px)");
    });
    var getBreakpointIndex = function () { return mediaQueryLists.findIndex(function (mql) { return mql.matches; }); };
    var _b = __read(react_1.useState(getBreakpointIndex()), 2), value = _b[0], setValue = _b[1];
    react_1.useEffect(function () {
        var handleBreakpoint = function () {
            setValue(getBreakpointIndex);
        };
        // NOTE: older versions of Safari use the older `addListener` and `removeListener` methods
        mediaQueryLists.forEach(function (mql) {
            try {
                mql.addEventListener('change', handleBreakpoint);
            }
            catch (err) {
                try {
                    mql.addListener(handleBreakpoint);
                }
                catch (_err) {
                    // Do nothing
                }
            }
        });
        return function () {
            try {
                mediaQueryLists.forEach(function (mql) { return mql.removeEventListener('change', handleBreakpoint); });
            }
            catch (err) {
                try {
                    mediaQueryLists.forEach(function (mql) { return mql.removeListener(handleBreakpoint); });
                }
                catch (_err) {
                    // Do nothing
                }
            }
        };
    }, []);
    return value;
};
exports.default = useBreakpointIndex;
//# sourceMappingURL=useBreakpointIndex.js.map